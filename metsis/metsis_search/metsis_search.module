<?php

/**
 * @file
 * Contains Metsis search module.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\query\QueryPluginBase;

use Drupal\views\ViewExecutable;
use Solarium\QueryType\Select\Query\Query;
use Solarium\QueryType\Select\Result\Result;

/**
 * Implements hook_help().
 */
function metsis_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the metsis_search module.
    /* @todo Something: Read help from module's README.md */
    case 'help.page.metsis_search':
      $output = '';
      $output .= '<h3>About</h3>';
      $output .= '<p>METSIS Metadata Search</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Add back to search link on children (elements) view.
 */
function metsis_search_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Get the current request object.
  // $request = \Drupal::request();
  // $referer = $request->headers->get('referer');.

  $config = \Drupal::config('metsis_search.settings');

  $disable_basket = $config->get('hide_add_to_basket');

  $new_value = '<div><span id="goBackID"><a id="goBackMapButton" class="w3-center adc-button adc-sbutton" onclick="go_back()">Go back to main search</a></span></div>';

  if ($view->id() == 'metsis_elements' && $display_id === 'results') {
    // $fields = $view->display_handler->getOption('header');
    // dpm($fields);

    // $options = [
    // 'id' => 'area_text_custom',
    // 'table' => 'views',
    // 'field' => 'area_text_custom',
    // 'relationship' => 'none',
    // 'group_type' => 'none',
    // 'admin_label' => '',
    // 'empty' => TRUE,
    // 'tokenize' => FALSE,
    // 'content' => [
    // 'value' => $new_value,
    // 'format' => 'full_html',
    // ],
    // 'plugin_id' => 'unfiltered_text',
    // 'attributes' => ['onclick' => 'go_back()'],
    // 'alter' => ['text' => $new_value]
    // ];
    // $view->setHandler('results', 'header', 'area_text_custom', $options);
    if ($disable_basket) {
      $fields = $view->display_handler->getOption('fields');
      $fields['nothing_2']['exclude'] = TRUE;
      $view->display_handler->overrideOption('fields', $fields);
    }
  }
  if ($view->id() == 'metsis_search' && $display_id === 'results') {
    if ($disable_basket) {
      $fields = $view->display_handler->getOption('fields');
      $fields['nothing_2']['exclude'] = TRUE;
      $view->display_handler->overrideOption('fields', $fields);
    }
  }

}

/**
 * Implements hook_views_pre_render().
 *
 * Adding  our custom css to the search view.
 */
function metsis_search_views_pre_render(ViewExecutable $view) {
  // Get the module path.
  $module_handler = \Drupal::service('module_handler');

  $module_path = $module_handler->getModule('metsis_search')->getPath();
  // Get the config.
  $config = \Drupal::config('metsis_search.settings');
  $pywps_service = $config->get('pywps_service');

  // Get the current request object.
  $request = \Drupal::request();
  $referer = $request->headers->get('referer');
  // dpm($view->storage->id());
  if (isset($view) && (($view->storage->id() == 'metsis_search') || ($view->storage->id() == 'metsis_simple_search'))) {
    $view->element['#attached']['library'][] = 'metsis_search/metadata_search_view';
    $view->element['#attached']['library'][] = 'metsis_search/children_count';
    // $view->element['#attached']['library'][] = 'blazy/load';
    $view->element['#attached']['library'][] = 'metsis_lib/adc_buttons';
    $view->element['#attached']['library'][] = 'metsis_lib/fa_academia';

    // Use lazysizes for custom thumbnail lazy loading.
    $view->element['#attached']['library'][] = 'metsis_search/thumbnail_lazy';
    // $view->element['#attached']['library'][] = 'lazy/lazy';
    // $view->element['#attached']['library'][] = 'lazy/lazysizes';
    $view->element['#attached']['library'][] = 'metsis_search/map_geocoder';
    // $view->element['#attached']['library'][] = 'metsis_search/map_ol';

    // $view->element['#cache']['max-age'] = 400;

    // Attach ts plot javascript and settings to view
    // $view->element['#attached']['library'][] = 'metsis_search/ts_plot';.
    $view->element['#attached']['drupalSettings']['metsis_search_ts_plot'] = [
      'pywps_service' => $pywps_service,
      'module_path' => $module_path
    ];
    // $view->addCacheContext('url.query_args');
    // \Drupal::logger('metsis')->debug('<pre><code>' . print_r($view->getCacheTags(), true) . '</code></pre>');
  }
  if (isset($view) && ($view->storage->id() == 'metsis_elements')) {
    $view->element['#attached']['library'][] = 'metsis_search/metadata_search_view';
    $view->element['#attached']['library'][] = 'metsis_search/children_count';
    // $view->element['#attached']['library'][] = 'blazy/load';
    $view->element['#attached']['library'][] = 'metsis_lib/adc_buttons';
    $view->element['#attached']['library'][] = 'metsis_lib/fa_academia';

    // Use lazysizes for custom thumbnail lazy loading.
    $view->element['#attached']['library'][] = 'metsis_search/thumbnail_lazy';
    // Add go back js script to elements view.
    $view->element['#attached']['library'][] = 'metsis_lib/go_back';

    $view->element['#attached']['library'][] = 'metsis_search/map_geocoder';

    // Attach ts plot javascript and settings to view
    // $view->element['#attached']['library'][] = 'metsis_search/ts_plot';.
    $view->element['#attached']['drupalSettings']['metsis_search_ts_plot'] = [
      'pywps_service' => $pywps_service,
      'module_path' => $module_path
    ];
    // $view->element['#cache']['max-age'] = 400;
    // Add back to parent search button.
    // dpm($view->header['area_text_custom']);
    // $view->header['area']->options['alter']['text'] = '<span id="goBackID"><a id="goBackMapButton" class="w3-center adc-button adc-sbutton" href="' . $referer .'">Go back to parent search</a></span><h2>Children</h2>';
    // var_dump($view->header);
    // $new_value = '<span id="goBackID"><a id="goBackMapButton" class="w3-center adc-button adc-sbutton" href="' . $referer .'">Go back to parent search</a></span><h2>Children</h2>';
    // $view->display['results']->handler->handlers['header']
    // ['area']->options['content'] = $new_value;
  }

  if (isset($view) && ($view->storage->id() == 'metsis_metadata_details')) {
    $view->element['#attached']['library'][] = 'metsis_lib/fa_academia';
  }

  // For simple search.
  if (isset($view) && ($view->storage->id() == 'metsis_simple_search')) {
    // dpm($view->field);
    // dpm($view->result);.
  }
}

/**
 * Implements hook_views_post_render().
 */
function metsis_search_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if (isset($view) && ($view->storage->id() == 'metsis_search')) {
    // $cache->options['results_lifespan'] = 400;
    // $cache->options['output_lifespan'] = 400;

    // dpm($cache);
    // dpm($output);
  }
}

/**
 * Implemets hook_theme().
 */
function metsis_search_theme($existing, $type, $theme, $path) {
  // Drupal::logger('metsis_search')->debug("Enter: hook_theme: " . $path);.
  return [
    'views_view_field__metsis_search__results__last_metadata_update_datetime' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view_field__metsis_metadata_details__page_1__last_metadata_update_datetime' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],

    'views_view_field__metsis_metadata_details__page_1__nothing_1' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_fieldsets_details' => [
      // 'render element' => 'elements',
      // 'base hook' => 'views field',
      'variables' => [
        'fields' => [],
        'attributes' => [],
        'legend' => '',
        'collapsed' => FALSE
      ],
      'template' => 'views-fieldsets-details',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
  ];
}

/**
 * Implments hook_views_query_alter().
 */
function metsis_search_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'metsis_search') {
    // Do something withe the veiws query here.
  }
}

/**
 * Implements hook_views_data_alter().
 */
function metsis_search_views_data_alter(array &$data) {
  // If ($view->id() == 'metsis_search') {
  // var_dump($data);
  // Do something withe the veiws query here
  // }.
}

/**
 * Implements hook_views_pre_build().
 */
function metsis_search_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'metsis_search') {
    // \Drupal::logger('metsis_search')->debug("hook_metsis_search_view_pre_build");
    // Check if reset query and reset boundingbox if so.
    \Drupal::cache()->invalidate('metsis_search_map');
    $request = \Drupal::request();
    $query_from_request = $request->query->all();

    // Check if operator op is set in query and op=Reset to reset boundingbox.
    if (isset($query_from_request['op'])) {
      if ($query_from_request['op'] == "Reset" || $query_from_request['op'] == "Nullstill") {
        \Drupal::logger('metsis_search')->debug("Got reset event..resetting bbox");
        $session = \Drupal::request()->getSession();
        // $tempstore = \Drupal::service('tempstore.private')->get('metsis_search');
        $session->remove('bboxFilter');
        $session->remove('tllat');
        $session->remove('tllon');
        $session->remove('brlat');
        $session->remove('brlon');
        $session->remove('extracted_info');
        $session->remove('proj');
        $session->remove('gcmd');
        $session->remove('keywords_level');
        $session->remove('back_to_search');
        $session->remove('place_filter');
        $session->remove('cond');
        $session->set('keywords_level', 1);

        $session->remove('place_lat');
        $session->remove('place_lon');

        \Drupal::cache()->invalidate('block:metsis_search_map');
        \Drupal::cache()->invalidate('block:metsis_search_map_block');
        // $config = \Drupal::config('metsis_search.settings');
        // $keep_parent_filter = $config->get('keep_parent_filter');
        // dpm($keep_parent_filter);
        /*    if ($keep_parent_filter) {
        $session->set('back_to_search', '/metsis/search?f[0]=dataset_level%3ALevel-1');
        return new \Symfony\Component\HttpFoundation\RedirectResponse('/metsis/search?f[0]=dataset_level%3ALevel-1');
        } else {
        $session->set('back_to_search', '/metsis/search');
        return new \Symfony\Component\HttpFoundation\RedirectResponse('/metsis/search');
        }*/
      }
    }
  }
}

/**
 * Implements hook_views_post_execute.
 */
function metsis_search_views_post_execute(ViewExecutable $view) {
  // dpm('hei');

  if ($view->id() == 'metsis_simple_search') {
    // dpm($view->result);
  }
}

/**
 * Implements hook_block_view().
 */
function metsis_search_block_view_alter(array &$build, BlockPluginInterface $block) {
  // if( $block->id() == 'metsis_search_map_block') {
  // \Drupal::logger('metsis_search')->debug("Entering hook_block_alter for MapSearchBlock");
  // }.
}

/**
 * Implements hook_form_alter().
 */
function metsis_search_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // \Drupal::logger('metsis_search')->debug("Entering hook_form_alter: form_id=" .$form_id );
  // if ($form_id == 'views_exposed_form') {
  // $form['actions']['reset']['#ajax'] = [
  // 'callback' => '\Drupal\metsis_search\Controller\MapSearchController::resetCallback',
  // ];
  // var_dump($form);
  // }
}

/**
 * Implements hook_views_exposed_form_alter().
 */
function metsis_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');
  if (($view['view']->id() == 'metsis_search') && ($view['view']->current_display == 'results')) {
    // $form['actions']['submit']['#value'] = t('Apply Nowx1');

    // Always keep advanced options closed.
    unset($form['secondary']['#open']);

    // Get the metsis earch config object.
    $config = \Drupal::config('metsis_search.settings');
    $enable_cloud_coverage = $config->get('enable_cloud_coverage');
    $cloud_coverage_details = $config->get('cloud_coverage_details');
    $disable_children_filter = $config->get('disable_children_filter');
    // dpm($form);
    if (!$enable_cloud_coverage) {
      // unset($form['#info']['filter-platform_ancillary_cloud_coverage']);.
      $form['platform_ancillary_cloud_coverage']['#type'] = 'hidden';
      $form['platform_ancillary_cloud_coverage']['#access'] = FALSE;
      $form['platform_ancillary_cloud_coverage']['#multiple'] = FALSE;
      $form['platform_ancillary_cloud_coverage_collapsible']['#type'] = 'hidden';
      $form['platform_ancillary_cloud_coverage_collapsible']['#access'] = FALSE;
    }
    if ($enable_cloud_coverage && (!$cloud_coverage_details)) {
      unset($form['platform_ancillary_cloud_coverage_collapsible']);
      unset($form['platform_ancillary_cloud_coverage']['#group']);
    }

    if ($disable_children_filter) {
      $form['is_parent']['#type'] = 'hidden';
      $form['is_parent']['#access'] = FALSE;
    }

    // Hide the children filter if dataset_level/type are set to Child/Level-2.
    /*  $form['is_parent']['#states'] = [
    'visible' => [
    ':input[name="dataset_type"]' => [
    ['value' => 1],
    ],
    ],
    ];*/
    // dpm($form);
    // dpm($form);
  }
}

/**
 * Alter the Font Awesome categories metadata.
 *
 * @param array &$metadata
 *   An array representing the categories metadata.
 */
function metsis_search_fontawesome_metadata_categories_alter(array &$metadata): void {
  // dpm($metadata);
}

/**
 * Alter the Font Awesome icon metadata.
 *
 * @param array &$metadata
 *   An array representing the icon metadata.
 */
function metsis_search_fontawesome_metadata_alter(array &$metadata): void {
  // Alter the metadata as needed.

  // dpm($metadata);
}

/**
 * Update function, set weight.
 */
function metsis_search_update_9302() {
  module_set_weight('metsis_search', 11);
}
