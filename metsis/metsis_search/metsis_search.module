<?php

/**
 * @file
 * Contains Metsis search module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Page\PageInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\filter\Plugin\Filter\FilterHtmlCorrector;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Item\FieldInterface;
use Drupal\search_api\Plugin\DataType\IntegerDataType;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Solarium\QueryType\Select\Query\Query;
use Solarium\QueryType\Select\Result\Result;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_help().
 */
function metsis_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the metsis_search module.
    /* @todo Something: Read help from module's README.md */
    case 'help.page.metsis_search':
      $output = '';
      $output .= '<h3>About</h3>';
      $output .= '<p>METSIS Metadata Search</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Add back to search link on children (elements) view.
 */
function metsis_search_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Get the current request object.
  $request = \Drupal::request();
  // $referer = $request->headers->get('referer');.
  $rUri = $request->getRequestUri();
  // dpm($rUri, __FUNCTION__);
  // dpm($request->query, __FUNCTION__);.
  /* Collect possible start and end dates for passing to elements view */
  $config = \Drupal::config('metsis_search.settings');

  $disable_basket = $config->get('hide_add_to_basket');

  $enable_netcdf_ondemand = $config->get('enable_netcdf_ondemand');

  $new_value = '<div><span id="goBackID"><a id="goBackMapButton" class="w3-center adc-button adc-sbutton" onclick="go_back()">Go back to main search</a></span></div>';
  if ($view->id() == 'metsis_elements' && $display_id === 'results') {
    // $fields = $view->display_handler->getOption('header');
    // dpm($args);

    // $options = [
    // 'id' => 'area_text_custom',
    // 'table' => 'views',
    // 'field' => 'area_text_custom',
    // 'relationship' => 'none',
    // 'group_type' => 'none',
    // 'admin_label' => '',
    // 'empty' => TRUE,
    // 'tokenize' => FALSE,
    // 'content' => [
    // 'value' => $new_value,
    // 'format' => 'full_html',
    // ],
    // 'plugin_id' => 'unfiltered_text',
    // 'attributes' => ['onclick' => 'go_back()'],
    // 'alter' => ['text' => $new_value]
    // ];
    // $view->setHandler('results', 'header', 'area_text_custom', $options);
    if ($disable_basket) {
      $fields = $view->display_handler->getOption('fields');
      $fields['nothing_2']['exclude'] = TRUE;
      $view->display_handler->overrideOption('fields', $fields);
    }
  }
  if ($view->id() == 'metsis_search' && $display_id === 'results') {
    if ($disable_basket) {
      $fields = $view->display_handler->getOption('fields');
      $fields['nothing_2']['exclude'] = TRUE;
      $view->display_handler->overrideOption('fields', $fields);
    }

    if (!$enable_netcdf_ondemand) {
      $fields = $view->display_handler->getOption('fields');
      $fields['nothing_1']['exclude'] = TRUE;
      $view->display_handler->overrideOption('fields', $fields);
    }

    /* Pass metsis search view arguments to elements view. */
    // $filters = $view->getExposedInput();
    // $fields = $view->display_handler->getOption('fields');
    // $orig_text = $fields['nothing_1']['alter']['text'];
    // // dpm($orig_text, __FUNCTION__);
    // // dpm($view, __FUNCTION__);
    // // dpm($filters);
    // $replace_text = '/search?';
    // foreach ($filters as $k => $v) {
    // if ($k === 'op') {
    // continue;
    // }
    // if ($k === 'is_parent') {
    // continue;
    // }
    // if ($k === 'fulltext') {
    // // dpm($v, __FUNCTION__);.
    // $v = str_replace(' ', '%20', $v);
    // $v = str_replace('"', '%22', $v);
    // $v = str_replace('*', '%2A', $v);
    // $v = str_replace('-', '%2D', $v);
    // $v = str_replace('?', '%3F', $v);
    // }
    // if (is_array($v)) {
    // continue;
    // }
    // $replace_text .= $k . '=' . $v . '&';

    // }
    // $rep_text_t = rtrim($replace_text, '&');
    // // dpm($rep_text_t, __LINE__);.
    // $replaced_text = str_replace('/search', $rep_text_t, $orig_text);
    // // dpm($replaced_text, __LINE__);.
    // $fields['nothing_1']['alter']['text'] = $replaced_text;
    // $view->display_handler->overrideOption('fields', $fields);
  }

  if ($view->id() == 'metsis_simple_search' && $display_id === 'results') {

    // $fields = $view->display_handler->getOption('fields');
    // dpm($view);
    /* Pass metsis search view arguments to elements view. */
    // $orig_text = $fields['nothing_4']['alter']['text'];
    // // dpm($orig_text);
    // // dpm($filters, __FUNCTION__);.
    // $replace_text = $rUri;
    // foreach ($filters as $k => $v) {
    // if ($k === 'op') {
    // continue;
    // }
    // if ($k === 'is_parent') {
    // continue;
    // }
    // if ($k === 'fulltext') {
    // $v = '';
    // }
    // if (is_array($v)) {
    // continue;
    // }
    // $replace_text .= $k . '=' . $v . '&';
    // }
    // $rep_text_t = rtrim($replace_text, '&');
    // // dpm($rep_text_t);
    // $replaced_text = str_replace('/metsis/simple_search', $rUri, $orig_text);
    // $replaced_text = str_replace('?related_dataset_id', '&related_dataset_id', $replaced_text);
    // // dpm($replaced_text, __FUNCTION__);.

    // $fields['nothing_4']['alter']['text'] = $replaced_text;

    // If (isset($filters['related_dataset_id']) && $filters['related_dataset_id'] != '') {
    // $parent_args = [$filters['related_dataset_id']];
    // // dpm($parent_args, __FUNCTION__. ':'. __LINE__);.
    // $parent_view = Views::getView('metsis_metadata_details_parent');
    // // If (is_object($view)) {.
    // $parent_view->setArguments($parent_args);
    // parent_view->setDisplay('page_2');
    // // $view->preExecute();
    // $parent_view->execute();
    // // $content = $view->buildRenderable('results', $args);
    // dpm($parent_view->result[0]->_item->getFields(TRUE)['title']->getValues()[0]->getText(),__FUNCTION__ . ':'. __LINE__);
    // $parent_title = $parent_view->result[0]->_item->getFields(TRUE)['title']->getValues()[0]->getText();
    // $fields['nothing_5']['alter']['text'] = $parent_title;
    // // }
    // }
    // $view->display_handler->overrideOption('fields', $fields);.

  }
}

/**
 * {@inheritdoc}
 */
function metsis_search_page_build(PageInterface $page) {
  // Get the render array for the page
  // $page_array = &$page->getPageArray();
  // dpm($page_array, __FUNCTION__);.
}

/**
 * Implements hook_views_pre_render().
 *
 * Adding  our custom css to the search view.
 */
function metsis_search_views_pre_render(ViewExecutable $view) {
  // Get the module path.
  $module_handler = \Drupal::service('module_handler');

  $module_path = $module_handler->getModule('metsis_search')->getPath();
  // Get the config.
  $config = \Drupal::config('metsis_search.settings');
  $pywps_service = $config->get('pywps_service');

  // Get the current request object.
  $request = \Drupal::request();
  $referer = $request->headers->get('referer');
  // dpm($view->storage->id());
  if (isset($view) && (($view->storage->id() == 'metsis_search') || ($view->storage->id() == 'metsis_simple_search'))) {
    $view->element['#attached']['library'][] = 'metsis_search/metadata_search_view';
    $view->element['#attached']['library'][] = 'metsis_search/children_count';
    // $view->element['#attached']['library'][] = 'blazy/load';
    $view->element['#attached']['library'][] = 'metsis_lib/adc_buttons';
    $view->element['#attached']['library'][] = 'metsis_lib/fa_academia';

    // Use lazysizes for custom thumbnail lazy loading.
    $view->element['#attached']['library'][] = 'metsis_search/thumbnail_lazy';
    // $view->element['#attached']['library'][] = 'lazy/lazy';
    // $view->element['#attached']['library'][] = 'lazy/lazysizes';
    // $view->element['#attached']['library'][] = 'metsis_search/map_geocoder';
    $view->element['#attached']['library'][] = 'metsis_search/parent_filter';
    // $view->element['#attached']['library'][] = 'metsis_search/map_ol';
    $view->element['#attached']['library'][] = 'core/drupal';
    $view->element['#attached']['library'][] = 'core/jquery';
    $view->element['#attached']['library'][] = 'core/drupal.states';
    $view->element['#attached']['library'][] = 'core/drupal.dialog.ajax';
    // $view->element['#cache']['max-age'] = 400;

    // Attach ts plot javascript and settings to view
    // $view->element['#attached']['library'][] = 'metsis_search/ts_plot';.
    $view->element['#attached']['drupalSettings']['metsis_search_ts_plot'] = [
      'pywps_service' => $pywps_service,
      'module_path' => $module_path
    ];
    // Attach the name of the view, that we might need in the js later.
    $view->element['#attached']['drupalSettings']['metsis_search']['search_view'] = $view->storage->id();
    // dpm($view->exposed_widgets, __FUNCTION__. 'exposed widgets');
    // $view->addCacheContext('url.query_args');
    // \Drupal::logger('metsis')->debug('<pre><code>' . print_r($view->getCacheTags(), true) . '</code></pre>');.

    /*
     * NOTE THIS PART IS PROBABLY DOING NOTHING. INVESTIGATE.
     */
    $parent_info = \Drupal::service('metsis_search.state')->get('parent_info');
    // dpm($parent_info, __FUNCTION__ . ' parent info');.
    $exposedInput = $view->getExposedInput();
    if (empty($exposedInput['related_dataset_id'])) {
      // \Drupal::logger('metsis')->notice('Hiding cloud coverage filter.');
      // $view->exposed_widgets['platform_ancillary_cloud_coverage']['#type'] = 'hidden';
      // $view->exposed_widgets['platform_ancillary_cloud_coverage']['#access'] = FALSE;
      // dpm($parent_info, __FUNCTION__ . '[PARENT INFO]');
    }
    if (!empty($parent_info)) {
      $ptitle = $parent_info['title'][0] ?? '';
      if (!empty($exposedInput['related_dataset_id'] && str_starts_with($ptitle, 'S2') == TRUE)) {
        // \Drupal::logger('metsis')->notice('Showing cloud coverage filter.');

        // $view->exposed_widgets['platform_ancillary_cloud_coverage']['#access'] = TRUE;
      }
    }
  }
  if (isset($view) && ($view->storage->id() == 'metsis_elements')) {
    $view->element['#attached']['library'][] = 'metsis_search/metadata_search_view';
    $view->element['#attached']['library'][] = 'metsis_search/children_count';
    // $view->element['#attached']['library'][] = 'blazy/load';
    $view->element['#attached']['library'][] = 'metsis_lib/adc_buttons';
    $view->element['#attached']['library'][] = 'metsis_lib/fa_academia';

    // Use lazysizes for custom thumbnail lazy loading.
    $view->element['#attached']['library'][] = 'metsis_search/thumbnail_lazy';
    // Add go back js script to elements view.
    $view->element['#attached']['library'][] = 'metsis_lib/go_back';

    $view->element['#attached']['library'][] = 'metsis_search/map_geocoder';

    // Attach ts plot javascript and settings to view
    // $view->element['#attached']['library'][] = 'metsis_search/ts_plot';.
    $view->element['#attached']['drupalSettings']['metsis_search_ts_plot'] = [
      'pywps_service' => $pywps_service,
      'module_path' => $module_path
    ];
    // $view->element['#cache']['max-age'] = 400;
    // Add back to parent search button.
    // dpm($view->header['area_text_custom']);
    // $view->header['area']->options['alter']['text'] = '<span id="goBackID"><a id="goBackMapButton" class="w3-center adc-button adc-sbutton" href="' . $referer .'">Go back to parent search</a></span><h2>Children</h2>';
    // var_dump($view->header);
    // $new_value = '<span id="goBackID"><a id="goBackMapButton" class="w3-center adc-button adc-sbutton" href="' . $referer .'">Go back to parent search</a></span><h2>Children</h2>';
    // $view->display['results']->handler->handlers['header']
    // ['area']->options['content'] = $new_value;
  }

  if (isset($view) && ($view->storage->id() == 'metsis_metadata_details')) {
    $view->element['#attached']['library'][] = 'metsis_lib/fa_academia';
    if (\Drupal::currentUser()->isAnonymous()) {
      $view->field['storage_information_file_location']->options['exclude'] = TRUE;
    }
  }

  // For simple search.
  if (isset($view) && ($view->storage->id() == 'metsis_simple_search')) {
    $view->element['#attached']['library'][] = 'views/views.responsive-grid';
  }
  if (isset($view) && ($view->storage->id() == 'metsis_search')) {
    // dpm($view->result, __FUNCTION__);.
  }
}

/**
 * Implements hook_views_post_render().
 */
function metsis_search_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if (isset($view) && (($view->storage->id() == 'metsis_search')
      ||($view->storage->id() == 'metsis_simple_search'))) {
    // dpm($output, __FUNCTION__ . ': $output');.

  }
}

/**
 * Implements hook_preprocess_views_view_field()
 */
function metsis_search_preprocess_views_view_field(&$variables) {
  if ($variables['view']->id() == 'metsis_simple_search' && $variables['field']->options['id'] == 'keywords_keyword') {
    // Get the result row.
    $row = $variables['row'];

    // Get the data for your multi-value field.
    // The exact way to do this depends on your search index configuration.
    // The example below assumes you have a field 'field_my_field' in the search index.
    $field_data = $row->{'solr_document/keywords_keyword'};
    // dpm($field_data, __FUNCTION__);.

    // Summarize the field data.
    if (count($field_data) > 5) {
      $field_data = array_slice($field_data, 0, 5);
      $field_data[] = '...';
    }

    // // Set the output of the field.
    $variables['output'] = ['#markup' => implode(', ', $field_data)];
  }
}

/**
 * {@inheritdoc}
 */
function metsis_search_preprocess_page(&$variables) {
  // dpm($variables, __FUNCTION__);
  // dpm('hei');.
}

/**
 * Implemets hook_theme().
 */
function metsis_search_theme($existing, $type, $theme, $path) {
  // Drupal::logger('metsis_search')->debug("Enter: hook_theme: " . $path);.
  return [
    'views_view_field__metsis_search__results__last_metadata_update_datetime' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view_field__metsis_elements__results__last_metadata_update_datetime' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view_field__metsis_metadata_details__page_1__last_metadata_update_datetime' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'block__header__id__metsis_metsissearchmap' => [
      'template' => 'block--header--id--metsis-metsissearchmap',
      'render element' => 'elements',
      'base hook' => 'block',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view__metsis_simple_search__results' => [
      'template' => 'views-view--metsis-simple-search--results',
      'render element' => 'elements',
      'base hook' => 'views view',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view__metsis_search__results' => [
      'template' => 'views-view--metsis-search--results',
      'render element' => 'elements',
      'base hook' => 'views view',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view_field__metsis_metadata_details__page_1__nothing_1' => [
      // 'template' => 'views-view-field--metsis_search--results--last_metadata_update_datetime',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_view_field__metsis_simple_search__results__parent_info' => [
      // 'variables' => ['items' => NULL],
      // 'template' => 'views-view-fields--metsis-simple-search--results--parent-info',
      'render element' => 'elements',
      'base hook' => 'views field',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
    'views_fieldsets_details' => [
      // 'render element' => 'elements',
      // 'base hook' => 'views field',
      'variables' => [
        'fields' => [],
        'attributes' => [],
        'legend' => '',
        'collapsed' => FALSE
      ],
      'template' => 'views-fieldsets-details',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
      // 'page__metsis__simple_search' => [
      // //'render element' => 'elements',
      // 'base hook' => 'page',
      // 'path' => 'modules/metsis/metsis_search/templates',
      // ],
    'metsis_search_parent_info' => [
      'variables' => ['data' => NULL],
    ],
    'metsis_search_netcdf_on_demand' => [
      'render element' => 'form',
      'path' => 'modules/metsis/metsis_search/templates',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_views_view_fields_alter().
 */
// Function metsis_search_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
// if ($variables['view']->id() === 'metsis_simple_search' && $variables['view']->current_display == 'results') {
// if ($variables['row']->_entity) {
// foreach ($variables['row']->_entity->getFields() as $field => $info) {
// if ($field === 'parent_info') {
// $suggestions[] = 'views_view_field__metsis_simple_search__results__parent_info';
// }
// }
// }
// }
// }.

/**
 * Implments hook_views_query_alter().
 */
function metsis_search_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'metsis_search' || $view->id() == 'metsis_search_date_test') {
    // Do something withe the veiws query here.
    // dpm($view, __FUNCTION__);
    // dpm($query, __FUNCTION__);.
  }
}

/**
 * Implements hook_views_data_alter().
 */
function metsis_search_views_data_alter(array &$data) {
  // \Drupal::logger('metsis_search')->notice("hook_views_data_alter");
  // If ($view->id() == 'metsis_search') {
  // Do something withe the veiws query here
  // }.
  // Override the views filter to custom date_range filter for the date range search.
  if (isset($data['search_api_index_metsis_simple_search']['temporal_extent_period_dr'])) {
    $data['search_api_index_metsis_simple_search']['temporal_extent_period_dr']['filter']['id'] = 'search_api_date_range';
    // dpm($data['search_api_index_metsis_simple_search']['temporal_extent_period_dr'], __FUNCTION__);.
    $data['search_api_index_metsis_simple_search']['temporal_extent_period_dr']['field']['id'] = 'daterange';
    // dpm($data['search_api_index_metsis_simple_search']['temporal_extent_start_date'], __FUNCTION__);.
  }
  // Overide boundingbox filter for both search views.
  if (isset($data['search_api_index_metsis']['bbox'])) {
    $data['search_api_index_metsis']['bbox']['filter']['id'] = 'metsis_search_bbox_filter';
    $data['search_api_index_metsis']['bbox']['field']['id'] = 'solr_bbox';
    // $data['search_api_index_metsis']['bbox']['field']['handler'] = 'views_handler_field_prerender_list';
  }
  if (isset($data['search_api_index_metsis_simple_search']['bbox'])) {
    $data['search_api_index_metsis_simple_search']['bbox']['filter']['id'] = 'metsis_search_bbox_filter';
    $data['search_api_index_metsis_simple_search']['bbox']['field']['id'] = 'solr_bbox';
    // $data['search_api_index_simple_search']['bbox']['field']['handler'] = 'views_handler_field_prerender_list';
  }

  /*
   * Add some custom fields to the view.
   */
  $data['search_api_index_metsis']['num_children'] = [
    'title' => 'Number of children',
    'help' => new TranslatableMarkup('Special placeholder to show number found of total children.'),
    'field' => [
      'id' => 'search_api',
        'real field' => 'solr_document/num_children',
        'search_api field' => 'num_children',
        'description' => 'Special placeholder to show number found of total children.'
      ],
  ];
  $data['search_api_index_metsis']['children_search_string'] = [
    'title' => 'The search string for the children search',
    'help' => new TranslatableMarkup('Special placeholder for the generated child query string'),
    'field' => [
      'id' => 'search_api',
        'real field' => 'solr_document/children_search_string',
        'search_api field' => 'children_search_string',
        'description' => 'Special placeholder for the generated child query string'
     ],
  ];

  $data['search_api_index_metsis_simple_search']['num_children'] = [
    'title' => 'Number of children',
    'help' => new TranslatableMarkup('Special placeholder to show number found of total children.'),
    'field' => [
      'id' => 'search_api',
        'real field' => 'solr_document/num_children',
        'search_api field' => 'num_children',
        'description' => 'Special placeholder to show number found of total children.'
      ],
  ];
  $data['search_api_index_metsis_simple_search']['children_search_string'] = [
    'title' => 'The search string for the children search',
    'help' => new TranslatableMarkup('Special placeholder for the generated child query string'),
    'field' => [
      'id' => 'search_api',
        'real field' => 'solr_document/children_search_string',
        'search_api field' => 'children_search_string',
        'description' => 'Special placeholder for the generated child query string'
     ],
  ];
  $data['search_api_index_metsis_simple_search']['parent_info'] = [
    'title' => 'Parent Info',
    'help' => new TranslatableMarkup('Special placeholder to info about parent for the child document.'),
    'field' => [
      'id' => 'search_api',
        'real field' => 'solr_document/parent_info',
        'search_api field' => 'parent_info',
        'description' => 'Special placeholder to info about parent for the child document.'
      ],
  ];
  $data['search_api_index_metsis']['parent_info'] = [
    'title' => 'Parent Info',
    'help' => new TranslatableMarkup('Special placeholder to info about parent for the child document.'),
    'field' => [
      'id' => 'search_api',
        'real field' => 'solr_document/parent_info',
        'search_api field' => 'parent_info',
        'description' => 'Special placeholder to info about parent for the child document.'
      ],
  ];

  // dpm($data['views']);.

  // dpm($data['search_api_index_metsis_simple_search'], __FUNCTION__);
  // dpm($data, __FUNCTION__);.
}

/**
 * Implements hook_views_pre_build().
 */
function metsis_search_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'metsis_search' || $view->id() == 'metsis_elements') {
    // \Drupal::logger('metsis_search')->notice($view->id());
    // Check if reset query and reset boundingbox if so.
    // \Drupal::cache()->invalidate('metsis_search_map');
    // $request = \Drupal::request();
    // $query_from_request = $request->query->all();
    // dpm($query_from_request, __FUNCTION__);
    // Check if operator op is set in query and op=Reset to reset boundingbox.
    if (isset($query_from_request['reset'])) {
      if ($query_from_request['reset'] == "Reset" || $query_from_request['reset'] == "Nullstill") {
        \Drupal::logger('metsis_search')->debug("Got reset event..resetting bbox");
        // $session = \Drupal::request()->getSession();
        // // $tempstore = \Drupal::service('tempstore.private')->get('metsis_search');
        // $session->remove('bboxFilter');
        // $session->remove('tllat');
        // $session->remove('tllon');
        // $session->remove('brlat');
        // $session->remove('brlon');
        // $session->remove('extracted_info');
        // $session->remove('proj');
        // $session->remove('gcmd');
        // $session->remove('keywords_level');
        // $session->remove('back_to_search');
        // $session->remove('place_filter');
        // $session->remove('cond');
        // $session->set('keywords_level', 1);

        // $session->remove('place_lat');
        // $session->remove('place_lon');

        // \Drupal::cache()->invalidate('block:metsis_search_map');
        // \Drupal::cache()->invalidate('block:metsis_search_map_block');
        // $config = \Drupal::config('metsis_search.settings');
        // $keep_parent_filter = $config->get('keep_parent_filter');
        // dpm($keep_parent_filter);
        /*    if ($keep_parent_filter) {
        $session->set('back_to_search', '/metsis/search?f[0]=dataset_level%3ALevel-1');
        return new \Symfony\Component\HttpFoundation\RedirectResponse('/metsis/search?f[0]=dataset_level%3ALevel-1');
        } else {
        $session->set('back_to_search', '/metsis/search');
        return new \Symfony\Component\HttpFoundation\RedirectResponse('/metsis/search');
        }*/
        if ($view->id() == 'metsis_elements') {
          \Drupal::logger('metsis_search')->debug("Elements reset event. Redirect and callin main search reset");
          $res = new RedirectResponse('/metsis/search?reset=Reset');
          $res->send();
          return;
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_execute.
 */
function metsis_search_views_post_execute(ViewExecutable $view) {
  // dpm('hei');.

  if ($view->id() == 'metsis_simple_search') {
    // dpm($view, __FUNCTION__);.
  }
}

/**
 * Implements hook_block_view().
 */
function metsis_search_block_view_alter(array &$build, BlockPluginInterface $block) {
  // Check if the block is the one containing your exposed form.
}

/**
 * Implements hook_form_alter().
 */
function metsis_search_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // \Drupal::logger('metsis_search')->debug("Entering hook_form_alter: form_id=" .$form_id );
  // if ($form_id == 'views_exposed_form') {
  // $form['actions']['reset']['#ajax'] = [
  // 'callback' => '\Drupal\metsis_search\Controller\MapSearchController::resetCallback',
  // ];
  // var_dump($form);
  // }'
  // dpm($form_id, __FUNCTION__);
  $current_path = \Drupal::service('path.current')->getPath();

  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-metsis-elements-results') {
    // if(in_array('bef-exposed-form', $form['#attributes']['class'])){
    // //force the form action to match the current path - used to fix broken exposed filters when using contextual links
    // dpm($current_path, __FUNCTION__);
    // dpm($form_id, __FUNCTION__);.

    $form['#action'] = $current_path;
    // dpm($form, __FUNCTION__);.

    // }
  }

}


/**
 * Implements hook_views_exposed_form_alter().
 *
 * Do some customizations for the exposed search form.
 */
function metsis_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');
  if (($view['view']->id() == 'metsis_search') && ($view['view']->current_display == 'results')) {
    // $form['actions']['submit']['#value'] = t('Apply Nowx1');
    // dpm($form, __FUNCTION__);
    // dpm($form_state, __FUNCTION__);
    // Always keep advanced options closed.
    unset($form['secondary']['#open']);

    // Get the metsis earch config object.
    $config = \Drupal::config('metsis_search.settings');
    $enable_cloud_coverage = $config->get('enable_cloud_coverage');
    $cloud_coverage_details = $config->get('cloud_coverage_details');
    $disable_children_filter = $config->get('disable_children_filter');
    // dpm($form);
    if (!$enable_cloud_coverage) {
      // unset($form['#info']['filter-platform_ancillary_cloud_coverage']);.
      // $form['platform_ancillary_cloud_coverage']['#type'] = 'hidden';
      // $form['platform_ancillary_cloud_coverage']['#access'] = FALSE;
      // $form['platform_ancillary_cloud_coverage']['#multiple'] = FALSE;.

      $form['platform_ancillary_cloud_coverage']['#attributes']['class'][] = 'visually-hidden';
      $form['platform_ancillary_cloud_coverage']['#title'] = '';
      $form['platform_ancillary_cloud_coverage']['#description'] = '';
      // $form['platform_ancillary_cloud_coverage']['#size'] = 0;

      $form['platform_ancillary_cloud_coverage_collapsible']['#type'] = 'hidden';
      $form['platform_ancillary_cloud_coverage_collapsible']['#access'] = FALSE;
    }
    if ($enable_cloud_coverage && (!$cloud_coverage_details)) {
      unset($form['platform_ancillary_cloud_coverage_collapsible']);
      unset($form['platform_ancillary_cloud_coverage']['#group']);
    }

    if ($disable_children_filter) {
      $form['is_parent']['#type'] = 'hidden';
      $form['is_parent']['#access'] = FALSE;
    }
    /*
     * Hide the bbox filter from the advanced menu. Use visually hidden,
     * to make screen reader see the form.
     *
     * @todo Add metsis search configuration option to show/hide this form element.
     */
    if (!$config->get('show_bbox_filter_exposed')) {
      $form['bbox_wrapper']['#attributes']['class'][] = 'visually-hidden';
      $form['bbox_collapsible']['#attributes']['class'][] = 'visually-hidden';
    }

    /*
     * We always hide the parent /related_dataset_id filter.
     */
    $form['related_dataset_id']['#attributes']['class'][] = 'visually-hidden';
    $form['related_dataset_id']['#title'] = '';
    $form['related_dataset_id']['#description'] = '';
    $form['related_dataset_id']['#size'] = 0;

    // dpm($form, __FUNCTION__. '[FORM]');.

    $header = $view['view']->header;

    // dpm($header['metsis_search_parent_info']);.
    $parent_info = \Drupal::service('metsis_search.state')->get('parent_info');
    // dpm($parent_info);
    $ptitle = $parent_info['title'][0] ?? '';
    if (!empty($parent_info) && $ptitle !== '' && str_starts_with($ptitle, 'S2') == TRUE) {
      \Drupal::logger('metsis')->notice('Showing cloud coverage filter.');
      // $form['platform_ancillary_cloud_coverage']['#access'] = TRUE;
      unset($form['platform_ancillary_cloud_coverage']['#attributes']);
      $form['platform_ancillary_cloud_coverage']['#title'] = 'Cloud Coverage';
      $form['platform_ancillary_cloud_coverage']['#description'] = '';
      $form['platform_ancillary_cloud_coverage']['#weight'] = 5;

      unset($form['platform_ancillary_cloud_coverage_collapsible']);
      unset($form['platform_ancillary_cloud_coverage']['#group']);

      // $form['platform_ancillary_cloud_coverage']['#type'] = 'select';
      // $form['platform_ancillary_cloud_coverage']['#access'] = TRUE;
      // $form['platform_ancillary_cloud_coverage']['#multiple'] = TRUE;
      // $view->exposed_widgets['platform_ancillary_cloud_coverage']['#access'] = TRUE;
      // Avoid stale parent_info
      // \Drupal::service('metsis_search.state')->set('parent_info', []);
    }
    // dpm($view['view']->getExposedInput(), __FUNCTION__. '[VIEW]');
    // dpm($form);
    // dpm($form);

  }
  if (($view['view']->id() == 'metsis_elements') && ($view['view']->current_display == 'results')) {
    // $form['actions']['submit']['#value'] = t('Apply Nowx1');

    // Always keep advanced options closed.
    unset($form['secondary']['#open']);

    // Get the metsis earch config object.
    $config = \Drupal::config('metsis_search.settings');
    $enable_cloud_coverage = $config->get('enable_cloud_coverage_elements');
    $cloud_coverage_details = $config->get('cloud_coverage_details_elements');
    $disable_children_filter = $config->get('disable_children_filter_elements');
    // dpm($form);
    if (!$enable_cloud_coverage) {
      // unset($form['#info']['filter-platform_ancillary_cloud_coverage']);.
      $form['platform_ancillary_cloud_coverage']['#type'] = 'hidden';
      $form['platform_ancillary_cloud_coverage']['#access'] = FALSE;
      $form['platform_ancillary_cloud_coverage']['#multiple'] = FALSE;
      $form['platform_ancillary_cloud_coverage_collapsible']['#type'] = 'hidden';
      $form['platform_ancillary_cloud_coverage_collapsible']['#access'] = FALSE;
    }
    if ($enable_cloud_coverage && (!$cloud_coverage_details)) {
      unset($form['platform_ancillary_cloud_coverage_collapsible']);
      unset($form['platform_ancillary_cloud_coverage']['#group']);
    }

    // If ($disable_children_filter) {
    // $form['is_parent']['#type'] = 'hidden';
    // $form['is_parent']['#access'] = FALSE;
    // }.
  }
  if (($view['view']->id() == 'metsis_simple_search') && ($view['view']->current_display == 'results')) {
    /*
     * Hide the bbox filter from the advanced menu. Use visually hidden,
     * to make screen reader see the form.
     *
     * @todo Add metsis search configuration option to show/hide this form element.
     */
    $config = \Drupal::config('metsis_search.settings');
    if (!$config->get('show_bbox_filter_exposed')) {
      $form['bbox_wrapper']['#attributes']['class'][] = 'visually-hidden';
      $form['bbox_collapsible']['#attributes']['class'][] = 'visually-hidden';
    }

    /*
     * We always hide the parent /related_dataset_id filter.
     */
    $form['related_dataset_id']['#attributes']['class'][] = 'visually-hidden';
    $form['related_dataset_id']['#title'] = '';
    $form['related_dataset_id']['#description'] = '';
    $form['related_dataset_id']['#size'] = 0;

    // Maximize the search box for better UI.
    $form['search_api_fulltext"']['#size'] = 500;
    // $form['related_dataset_id']['#access'] = FALSE;

    // $form['is_child']['#type'] = 'hidden';
    // $form['is_child']['#access'] = FALSE;
    // dpm($form, __FUNCTION__. '[FORM]');
    // dpm($form_state, __FUNCTION__ . '[FORM STATE]');
    // dpm($view, __FUNCTION__. '[VIEW]');
    // dpm($form,__FUNCTION__);
  }

}

/**
 * Alter the Font Awesome categories metadata.
 *
 * @param array &$metadata
 *   An array representing the categories metadata.
 */
function metsis_search_fontawesome_metadata_categories_alter(array &$metadata): void {
  // dpm($metadata);
}

/**
 * Alter the Font Awesome icon metadata.
 *
 * @param array &$metadata
 *   An array representing the icon metadata.
 */
function metsis_search_fontawesome_metadata_alter(array &$metadata): void {
  // Alter the metadata as needed.

  // dpm($metadata);
}

/**
 * Implements hook_library_info_alter().
 *
 * Remove the settings_tray functinality from the search page
 * as it is giving errors.
 *
 * {@inheritdoc}
 */
function metsis_search_library_info_alter(&$libraries, $extension) {
  // Remove the settings_tray functinality from the search page
  // as it is giving errors.
  if ($extension === 'settings_tray') {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name === 'view.metsis_search.results' || $route_name === 'view.metsis_simple_search.results') {
      unset($libraries['drupal.settings_tray']);
    }
  }
}

/**
 * Update function, set weight.
 */
function metsis_search_update_9302() {
  module_set_weight('metsis_search', 11);
}

/**
 * {@inheritdoc}
 */
function metsis_search_update_10223() {
  // Update the search api to use the new custom backend.
  $server = \Drupal::entityTypeManager()->getStorage('search_api_server')->load('local_metsis');
  $backend_id = $server->get('backend');

  // Check if the backend plugin ID is already changed. Replace 'my_new_backend' with the new backend plugin ID.
  if ($backend_id !== 'search_api_solr_metsis') {
    // Set the new backend plugin ID.
    $server->set('backend', 'search_api_solr_metsis');
    $server->save();
    \Drupal::logger('metsis_update')->notice("Updated search_api_solr backend to 'search_api_solr_metsis'");
  }
  // Update the config
  // Load the configuration object.
  $config = \Drupal::configFactory()->getEditable('metsis_search.settings');

  // Disable parent/children filter.
  $config->set('disable_children_filter', 1);
  $config->set('search_match_children', 1);
  $config->set('show_bbox_filter_exposed', 0);
  $config->set('hide_bbox_filter_exposed', 1);
  $config->set('map_bbox_autosubmit', 0);

  // Save the updated configuration.
  $config->save();
}

/**
 * Update block configuration.
 *
 * {@inheritdoc}
 */
function metsis_search_update_10300() {

  $block_plugin_id = 'metsis_search_map';
  $configFactory = \Drupal::service('config.factory');
  $blockConfigs = $configFactory->listAll('block.block.');
  $views_config_files = ['views.view.metsis_search.yml',
    'views.view.metsis_simple_search.yml',
  ];
  $index_config_files = ['search_api.index.metsis_simple_search.yml',
    'search_api.index.metsis_search.yml'
  ];

  $modulePath = \Drupal::service('extension.list.module')->getPath('metsis_search');
  $viewsConfigDir = "$modulePath/config/install";

  foreach ($blockConfigs as $configName) {
    $config = $configFactory->getEditable($configName);
    if ($config->get('plugin') == $block_plugin_id) {
      // Remove existing visibility page settings and add '/foo' and '/bar'.
      $visibilityPages = ['/metsis/search', '/metsis/simple_search'];
      \Drupal::logger('metsis_update')->notice("Disabled block $block_plugin_id and updated visibilty pages");
      $config->set('region', 'none');
      // $config->set('visibility.pages', $visibilityPages);
    }
  }
}

/**
 * Update block configuration.
 *
 * {@inheritdoc}
 */
function metsis_search_update_10302() {
  $config = \Drupal::configFactory()->getEditable('metsis_search.settings');

  // Disable parent/children filter.
  $config->set('remove_parent_zero_children', 0);
  $config->set('remove_keys_zero_children', 0);
  $config->set('search_sort_score', 0);
  // Save the updated configuration.
  $config->save();

}

/**
 * Update metsis_search configuration.
 *
 * {@inheritdoc}
 */
function metsis_search_update_10303() {
  $config = \Drupal::configFactory()->getEditable('metsis_search.settings');

  // Disable parent/children filter.
  $config->set('enable_netcdf_ondemand', 0);
  // Save the updated configuration.
  $config->save();

}

/*
// Load the View entity using the ViewEntityInterface storage class.
$viewStorage = \Drupal::entityTypeManager()->getStorage('view');
$viewId = 'your_view_id'; // Replace with your view's machine name.
$view = $viewStorage->load($viewId);

// Get an executable object for the View using the ViewExecutableFactory service.
$executable = \Drupal::service('views.executable')->get($view);

// Set the display to modify (in this case, 'default').
$executable->setDisplay('default');

// Get the Entity Block plugin in the header area of the view.
$entityBlockPluginId = 'your_entity_block_plugin_id'; // Replace with the ID of your Entity Block plugin.
$header = $executable->getHandler('header', $entityBlockPluginId);

// Modify the block_id option of the Entity Block plugin in the header area of the view.
$newBlockId = 'your_new_block_id'; // Replace with the new block ID you want to set.
$executable->setHandlerOption('header', $entityBlockPluginId, 'options', ['block_id' => $newBlockId]);

// Save the modified view entity.
$view->save();*/
