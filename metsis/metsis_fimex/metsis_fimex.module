<?php

require_once 'metsis_fimex.constants.inc';
include_once drupal_get_path('module', 'metsis_fimex') . '/includes/metsis_fimex.inc';
$epsg = [];

/**
 * implements hook_init
 */
function metsis_fimex_init() {
  drupal_add_css(drupal_get_path('module', 'metsis_wms') . '/css/style.min.css');
  drupal_add_js(drupal_get_path('module', 'metsis_wms') . '/js/bundle.js');
}

/*
 * implement hook_menu{
 */

function metsis_fimex_menu() {

  $menu[TRANSFORMATION_ENDPOINT] = [
    'title' => t('Transform dataset'),
    'description' => 'Creates a form to collect infromation needed for transformations with fimex',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['metsis_fimex'],
    'access callback' => TRUE,
  ];
  return $menu;
}

/*
 * implement hook_menu}
 */

/*
 * metsis_fimex form{
 */

function metsis_fimex($form, &$form_state) {
  global $user;
  global $metsis_conf;
  global $epsg;
  //if ($metsis_conf['metsis_fimex_authentication_required']['boolean'] === TRUE) {
  if ($metsis_conf['authentication_required'] === 1) {
    adc_require_login(drupal_get_destination(), $metsis_conf['authentication_default_message']);
  }
  if ($metsis_conf['message']['visible'] === TRUE) {
    drupal_set_message($metsis_conf['message']['under_construction'], 'warning');
  }
  if (isset($metsis_conf['warning']['transformation'])) {
    drupal_set_message($metsis_conf['warning']['transformation'], 'warning');
  }


  if (DEBUG) {
    display_example_requests();
  }
  if (!($user->uid)) {
    drupal_set_message($metsis_conf['authentication_default_message']);
    $dest = drupal_get_destination();
    drupal_goto('user/login', ['query' => drupal_get_destination()]);
  }

  /*
   * service call parameter, user info etc. {
   */

  $email = isset($_GET['email']) ? check_plain($_GET['email']) : $user->mail;

  /*
   * service call parameter, user infor etc. }
   */

  //can probaby not assume opendap access and must have a
  //url paramter to indicate that there is opendap (i.e. &opendap=yes or something like that)
  //this is key. we need to send in default form values or ol3 wms params.


  /*
   * get the data from search form and OpeNDAP and/or SOLR
   */

  $dataset_id = isset($_GET['dataset_id']) ? check_plain($_GET['dataset_id']) : '';
  $dataset_ids = explode(",", $dataset_id);

  $opendap_global_attributes = adc_get_od_global_attributes($dataset_id, SOLR_CORE_PARENT)['data']['findAllAttributes'];
  $opendap_variables = adc_get_od_variables($dataset_id, SOLR_CORE_PARENT)['data']['findAllVariables'];
  $opendap_start_time_strings = $metsis_conf['opendap_start_time_strings'];
  $opendap_stop_time_strings = $metsis_conf['opendap_stop_time_strings'];
  /*
   * you MUST initialize $start_time and $stop_time to have them in scope!!!
   *
   */
  $start_time = '';
  $stop_time = '';
  foreach ($opendap_global_attributes as $odga) {
    if (in_array(trim($odga['name']), $opendap_start_time_strings)) {

      $start_time = trim($odga['value']);
    }
    if (in_array(trim($odga['name']), $opendap_stop_time_strings)) {
      $stop_time = trim($odga['value']);
    }
  }
  /**
   * extract start and stop times}
   */
  $reshaped_vars = [];
  if (isset($metsis_conf['transformation_exclude_variables'])) {
    $transformation_exclude_variables = explode(',', $metsis_conf['transformation_exclude_variables']);
  }
  for ($i = 0; $i < count($opendap_variables); $i++) {
    if (isset($transformation_exclude_variables)) {
      if (in_array($opendap_variables[$i]['name'], $transformation_exclude_variables)) {
        continue;
      }
    }
    $reshaped_vars[$i]['name'] = $opendap_variables[$i]['name'];
    foreach ($opendap_variables[$i]['attributes'] as $k => $v) {
      $reshaped_vars[$i][$v['name']] = $v['value'];
      //            if ($v['name'] == 'proj4_string') {
      //                $reshaped_vars['proj4_string'] = $v['value'];
      //            }
    }
  }
  if (empty($dataset_ids)) {
    //no dataset_id was sent in
    drupal_goto("/metadata_search");
  }

  // these are SOLR data. They should probably be replaced with OpeNDAP data
  $fields = [
    METADATA_PREFIX . "geographic_extent_rectangle_east",
    METADATA_PREFIX . "geographic_extent_rectangle_west",
    METADATA_PREFIX . "geographic_extent_rectangle_north",
    METADATA_PREFIX . "geographic_extent_rectangle_south",
    METADATA_PREFIX . "temporal_extent_start_date",
    METADATA_PREFIX . "temporal_extent_end_date",
    METADATA_PREFIX . "title",
    METADATA_PREFIX . "abstract",
    METADATA_PREFIX . "data_access_resource",
  ];
  //we set up the variables form based on the first dataset in the list submitted.
  //ideally we need to use the common subset of the variables from ALL the submitted datasets
  //TODO
  // see scratchpad on phab
  //need to loop through all the datasets that were sent inn.
  $solr_data = [];
  $solr_cores = adc_get_solr_core($dataset_ids);
  for ($i = 0; $i < count($dataset_ids); $i++) {
    //todo
    //may need to use $dataset_ids as $solr_data[] keys...
    //$solr_data[] = msb_get_fields(SOLR_CORE_PARENT, $dataset_ids[$i], $fields);
    $solr_data[] = msb_get_fields($solr_cores[$dataset_ids[$i]], $dataset_ids[$i], $fields);
  }
  //$solr_data = msb_get_fields(SOLR_CORE_PARENT, $dataset_ids[0], $fields);
  //    foreach ($solr_data as $sd) {
  //        if ($sd['response']['numFound'] == 0) {
  //            drupal_set_message("Invalid dataset ID", 'error');
  //        }
  //    }
  //    if ($solr_data['response']['numFound'] == 0) {
  //        //an invalid dataset_id was sent in
  //        drupal_goto("/metadata_search");
  //    }
  //$dar = msb_concat_data_access_resource($solr_data['response']['docs'][0][METADATA_PREFIX . 'data_access_resource']);
  $dar = [];
  foreach ($solr_data as $sd) {
    if ($sd['response']['numFound'] == 0) {
      drupal_set_message("Invalid dataset ID", 'error');
    }

    $dar[] = msb_concat_data_access_resource($sd['response']['docs'][0][METADATA_PREFIX . 'data_access_resource']);
  }

  //todo
  //use metadata from the first dataset in URL is used

  $opendap_ddx = $dar[0]['OPeNDAP']['url'] . ".ddx";

  //test{
  //    $feature_types = adc_get_od_feature_type($opendap_ddx);
  //    foreach ($feature_types['Attribute'] as $a) {
  //        foreach ($a['Attribute'] as $aa) {
  //            if (isset($aa['value'])) {
  //                if ($aa['value'] == 'timeSeries') {\
  //                    //we have feature type time series. Do the markup
  //                }
  //            }
  //        }
  //    }
  // $feature_types['Attribute'][0]['Attribute'][24]['@attributes']['name']
  //$feature_types['Attribute'][0]['Attribute'][24]['value']
  //$opendap_ddx ="http://super-monitor.met.no/thredds/dodsC/lustreMntB/users/heikok/Meteorology/ecdiss-internet.met.no/ecdiss/NBS/S2A_MSIL1C_20170126T105321_N0204_R051_T32VNL_20170126T105315.nc.ddx";
  //test}
  $jod_data = adc_get_od_data($opendap_ddx);
  //$od_temporal_extent = adc_get_od_temporal_extent($jod_data);
  /**
   * test{
   */
  foreach ($opendap_global_attributes as $odga) {
    if ($odga['name'] == 'start_date' || $odga['name'] == 'min_time' || $odga['name'] == 'start_time' || $odga['name'] == 'calculated_start_time') {
      $od_temporal_extent['start_date'] = $odga['value'];
    }
    else {
      $od_temporal_extent['start_date'] = "";
    }
    if ($odga['name'] == 'stop_date' || $odga['name'] == 'max_time' || $odga['name'] == 'stop_time' || $odga['name'] == 'calculated_stop_time') {
      $od_temporal_extent['stop_date'] = $odga['value'];
    }
    else {
      $od_temporal_extent['stop_date'] = '';
    }
  }
  /**
   * test}
   */
  $epsg = get_proj4_strings();
  $od_proj4 = adc_get_od_proj4($jod_data);


  /**
   * TODO 3
   * hack hack hack{
   */
  if (isset($od_proj4['Original'])) {
    $epsg['Original'] = $od_proj4['Original'];
  }
  elseif (isset($reshaped_vars['proj4_string'])) {
    $epsg['Original'] = $reshaped_vars['proj4_string'];
  }
  else {
    $epsg['Original'] = "";
  }
  /**
   * hack hack hack}
   */
  //    $od_global_attributes = array();
  //    foreach ($jod_data['Attribute']['Attribute'] as $d) {
  //        $od_global_attributes[$d['@attributes']['name']] = $d['value'];
  //    }
  //TODO must determine which attributes are mandatory and flag them as MISSING
  // this hack is to suppress errors for now
  // a list of required attributes must be defined in the configuration file for the site
  // and checked here.
  //if several datasets are passed in (basket) the abstracts should be omitted,
  //the titles can be listed, but should probably be omitted?
  //we use $solr_data[0] for now, but may need to change to $solr_data[<dataset id key>]
  //see above comment. My be usefull if one dataset is considered to be master
  //    if (!array_key_exists('title', $od_global_attributes)) {
  //        $od_global_attributes['title'] = "Title (discovery metadata): " . implode(",", $solr_data['response']['docs'][0][METADATA_PREFIX . 'title']);
  //    }
  //    if (!array_key_exists('abstract', $od_global_attributes)) {
  //        $od_global_attributes['abstract'] = "Abstract (discovery metadata): " . implode(",", $solr_data['response']['docs'][0][METADATA_PREFIX . 'abstract']);
  //    }
  //    if (!array_key_exists('description', $od_global_attributes)) {
  //        $od_global_attributes['description'] = "Description: MISSING";
  //    }
  /**
   * test{
   */
  $od_global_attributes = $opendap_global_attributes;
  //    $od_global_attributes = array();
  //    foreach($opendap_global_attributes as $k => $v){
  //        $od_global_attributes[$k['name']] = $v['value'];
  //    }
  //
  /**
   * test}
   */
  if (!array_key_exists('title', $od_global_attributes)) {
    $od_global_attributes['title'] = "Title (discovery metadata): " . implode(",", $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'title']);
  }
  if (!array_key_exists('abstract', $od_global_attributes)) {
    $od_global_attributes['abstract'] = "Abstract (discovery metadata): " . implode(",", $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'abstract']);
  }
  if (!array_key_exists('description', $od_global_attributes)) {
    $od_global_attributes['description'] = "Description: MISSING";
  }
  //multivalues here
  //todo
  //refactor
  //need to construct the final url in a better way as base_url + data_ids[]
  $opendap_urls = [];
  foreach ($dar as $dd) {
    $opendap_urls[] = $dd['OPeNDAP']['url'];
  }

  $form['opendap'] = [
    'opendap' => [
      '#type' => 'hidden',
      //multivalues
      //todo
      //'#value' => $dar[0]['OPeNDAP']['url'],
      '#value' => implode(";", $opendap_urls),
    ],
  ];
  $form['od_title'] = [
    '#markup' => '<h1>' . $od_global_attributes['title'] . '</h1>',
  ];
  $form['od_abstract'] = [
    '#markup' => '<h4>' . $od_global_attributes['abstract'] . '</h4>',
  ];
  /*
   * wps fimex info {
   *
   * the WPS fimex should be amenable to interrogation and return
   * complete usage information as XML. This would allow for the
   * metsis_fimex form to be dynamically constructed - that is changes to the service
   * can be made visible in the form automatically.
   * As of 2016-10-12 the XML returned at $wps_fimex_url
   * does not contain enough information for the proposed automation
   *
   * $wps_fimex_url="http://157.249.176.174/cgi-bin/pywps.cgi?service=wps&version=1.0.0&request=describeprocess&identifier=transformation";
   * get_wps_fimex_info($wps_fimex_url);
   *
   */
  /*
   * wps fimex info }
   */

  /*
   * form actions {
   */
  $form['actions'] = ['#type' => 'actions'];
  //  $form['actions']['email'] = array(
  //    '#type' => 'textfield',
  //    '#title' => t('Send results to:'),
  //    '#weight' => 1,
  //    '#required' => TRUE,
  //    '#value' => t($email),
  //    '#element_validate' => array('geographical_region_validate'),
  //    '#attributes' => array(
  //      //'placeholder' => t('The e-mail address to send results to'),
  //      'class' => array(
  //        'geographical-area',
  //        'beautytips'),
  //      'title' => "The e-mail address to send the results to",
  //    ),
  //  );

  /*
   *
   */


  /*
   * form actions }
   */

  /*
   * email {
   */
  $form['user_info'] = [
    '#type' => 'fieldset',
    '#title' => t('The e-mail address to send the results to'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => [
      'class' => [
        'user-info-fieldset',
      ],
      'msb-tooltip' => "Enter the e-mail you wish the results to be sent to.",
    ],
  ];
  $form['user_info']['email'] = [
    'email' => [
      '#title' => t('Send results to:'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => t($email),
      '#element_validate' => ['email_validate'],
      '#attributes' => [
        //'placeholder' => t('The e-mail address to send the results to'),
        'class' => [
          'user-info',
          'beautytips',
        ],
        'title' => "The e-mail address to send the results to",
      ],
    ],
  ];
  /*
   * email }
   */

  /*
   * spatial {
   */
  $form['geographical_area'] = [
    '#type' => 'fieldset',
    '#title' => t('Select spatial extent'),
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => [
      'class' => [
        'geographical-area-fieldset',
      ],
      'msb-tooltip' => "Geographical area of desired output data (in degrees, relative to zero meridian/equator)",
    ],
  ];
  $form['geographical_area'][] = [
    //  '#type' => 'item',
    'north' => [
      '#title' => t('Degrees north'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_north'],
      '#element_validate' => ['geographical_region_validate'],
      '#attributes' => [
        //'placeholder' => t('Degrees relative to zero meridian/equator'),
        'class' => [
          'geographical-area',
          'beautytips',
        ],
        'title' => "Degrees north relative to zero meridian/equator",
      ],
    ],
    'south' => [
      '#title' => t('Degrees south'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_south'],
      '#element_validate' => ['geographical_region_validate'],
      '#attributes' => [
        //'placeholder' => t('Degrees relative to zero meridian/equator'),
        'class' => [
          'geographical-area',
          'beautytips',
        ],
        'title' => "Degrees south relative to zero meridian/equator",
      ],
    ],
    'east' => [
      '#title' => t('Degrees east'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_east'],
      '#element_validate' => ['geographical_region_validate'],
      '#attributes' => [
        //'placeholder' => t('Degrees relative to zero meridian/equator'),
        'class' => [
          'geographical-area',
          'beautytips',
        ],
        'title' => "Degrees east relative to zero meridian/equator",
      ],
    ],
    'west' => [
      '#title' => t('Degrees west'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_west'],
      '#element_validate' => ['geographical_region_validate'],
      '#attributes' => [
        //'placeholder' => t('Degrees relative to zero meridian/equator'),
        'class' => [
          'geographical-area',
          'beautytips',
        ],
        'title' => "Degrees west relative to zero meridian/equator",
      ],
    ],
  ];

  /*
   * spatial }
   */

  /*
   * temporal {
   */

  $form['temporal_extent'] = [
    '#type' => 'fieldset',
    '#title' => t('Select temporal extent'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => [
      'class' => [
        'temporal-extent-fieldset',
      ],
      'msb-tooltip' => "Temporal extent of output data",
    ],
  ];
  $form['temporal_extent'][] = [
    'start_date' => [
      '#title' => t('Start date'),
      '#type' => 'textfield',
      //'#type' => 'date_popup',
      //'#date_format' => 'Y-m-d H:i:s',
      //'#date_format' => 'Y-m-d',
      //'#date_year_range' => '-50:+2',
      //'#datepicker_options' => array(
      //  'changeMonth' => TRUE,
      //  'changeYear' => TRUE,
      // 'minDate' => 0,
      // 'maxDate' => 0
      //),
      //'#required' => TRUE,
      //'#default_value' => "1980-09-01 00:00:00",
      //'#default_value' => $od_temporal_extent['start_date'],
      //'#default_value' => adc_trim_string($od_global_attributes['start_date'], "UTC"),
      '#default_value' => $start_time,
      '#element_validate' => ['metsis_date_validate'],
      '#attributes' => [
        //'placeholder' => t('Temporal extent of output data'),
        'class' => [
          'temporal-extent',
          'beautytips',
        ],
        'title' => "Start date of output data",
      ],
    ],
    'stop_date' => [
      '#title' => t('Stop date'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      //'#default_value' => "1982-10-01 00:00:00",
      //'#default_value' => $od_temporal_extent['stop_date'],
      //'#default_value' => adc_trim_string($od_global_attributes['stop_date'], "UTC"),
      '#default_value' => $stop_time,
      '#element_validate' => ['metsis_date_validate'],
      '#attributes' => [
        //'placeholder' => t('Temporal extent of output data'),
        'class' => [
          'temporal-extent',
          'beautytips',
        ],
        'title' => "Stop date of output data",
      ],
    ],
  ];
  /*
   * temporal }
   */
  /*
   * variables {
   */
  //$variables = deprecated_adc_get_od_variables($jod_data);
  //deprecated_adc_get_od_variables is not used anymore
  //see above for definition of $reshaped_vars
  $variables = $reshaped_vars;
  $od_vars = [];
  foreach ($variables as $v) {
    $name = isset($v['name']) ? $v['name'] : "";
    $standard_name = isset($v['standard_name']) ? $v['standard_name'] : "";
    $long_name = isset($v['long_name']) ? $v['long_name'] : "";
    $units = isset($v['units']) ? $v['units'] : "";

    $od_vars[] = [
      'name' => $name,
      // 'description' => '',
      'standard_name' => $standard_name,
      'long_name' => $long_name,
      'units' => $units,
    ];
  }
  sort($od_vars);
  $header = [
    'name' => t('Name'),
    // 'description' => t('Description'),
    'standard_name' => t('Standard name'),
    'long_name' => t('Long name'),
    'units' => t('Units'),
  ];
  $options = [];
  foreach ($od_vars as $v) {
    //foreach ($od_vars_sort as $v) {
    $options[$v['name']] = [
      'name' => $v['name'],
      //'description' => $v['description'],
      'standard_name' => $v['standard_name'],
      'long_name' => $v['long_name'],
      'units' => $v['units'],
    ];
  }
  $form['od_variables'] = [
    '#type' => 'fieldset',
    '#title' => t('Select variables'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#element_validate' => ['select_variables_validate'],
    '#attributes' => [
      'class' => [
        'od-variables-fieldset',
      ],
      'msb-tooltip' => "Variables",
    ],
  ];
  $form['od_variables']['selected_variables'] = [
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t(''),
    '#weight' => 5,
  ];
  /*
   * variables }
   */
  $projection_options = [];
  foreach ($epsg as $key => $value) {
    global $epsg;
    if (!isset($value['description'])) {
      $projection_options[$key] = "No description found";
    }
    else {
      $projection_options[$key] = $value['description'];
    }
  }
  $form['projection'] = [
    '#type' => 'fieldset',
    '#title' => t('Select map projection'),
    '#weight' => 7,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => [
      'class' => [
        'projection-fieldset',
      ],
      'msb-tooltip' => "Map projection",
    ],
  ];
  $form['projection']['selected_projection'] = [
    '#type' => 'select',
    '#title' => t('Projection'),
    '#options' => $projection_options,
    '#default_value' => "Original",
    '#description' => t(''),
    '#empty' => t(''),
    '#weight' => 7,
  ];
  /*
   * map region {
   */
  $form['projection'][] = [
    'x_axis_from' => [
      '#title' => t('x-axis from:'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      //'#default_value' => "-300000.0",
      // '#weight' => 11,
      '#element_validate' => ['map_region_validate'],
      '#attributes' => [
        'placeholder' => t('Minimum value of x-coordinate'),
        'class' => [
          'map-region',
          'beautytips',
        ],
        'title' => "x-axis from",
      ],
    ],
    'x_axis_to' => [
      '#title' => t('x-axis to:'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      //'#default_value' => "1000000.0",
      '#element_validate' => ['map_region_validate'],
      '#attributes' => [
        'placeholder' => t('Maximum value of x-coordinate'),
        'class' => [
          'map-region',
          'beautytips',
        ],
        'title' => "x-axis to",
      ],
    ],
    'y_axis_from' => [
      '#title' => t('y-axis from:'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      //'#default_value' => "-2000000.0",
      '#element_validate' => ['map_region_validate'],
      '#attributes' => [
        'placeholder' => t('Minmum value of y-coordinate'),
        'class' => [
          'map-region',
          'beautytips',
        ],
        'title' => "y-axis from",
      ],
    ],
    'y_axis_to' => [
      '#title' => t('y-axis to:'),
      '#type' => 'textfield',
      //'#required' => TRUE,
      //'#default_value' => "-1000000.0",
      '#element_validate' => ['map_region_validate'],
      '#attributes' => [
        'placeholder' => t('Maximum value of y-coordinate'),
        'class' => [
          'map-region',
          'beautytips',
        ],
        'title' => "y-axis to",
      ],
    ],
  ];
  /*
   * map region }
   */
  /*
   * interpolation {
   */

  $interpolations = [
    "nearestneighbor" => "nearestneighbor",
    "bilinear" => "bilinear",
    "bicubic" => "bicubic",
    "coord_nearestneighbor" => "coord_nearestneighbor",
    "coord_kdtree" => "coord_kdtree",
    "forward_max" => "forward_max",
    "forward_mean" => "forward_mean",
    "forward_median" => "forward_median",
    "forward_sum" => "forward_sum",
  ];
  $form['projection']['selected_interpolation'] = [
    '#type' => 'select',
    '#title' => t('Interpolation'),
    '#options' => $interpolations,
    //'#default_value' => "Original",
    '#description' => t(''),
    '#empty' => t(''),
    '#weight' => 7,
  ];
  /*
   * interpolation steps {
   */
  $form['projection']['steps'] = [
    '#type' => 'textfield',
    '#title' => t('Number of steps'),
    //'#required' => TRUE,
    //'#default_value' => "500",
    '#description' => t(''),
    '#empty' => t(''),
    '#element_validate' => ['integer_validate'],
    '#attributes' => [
      'placeholder' => t('Number of point to interpolate to'),
      'class' => [
        'interpolation-steps',
        'beautytips',
      ],
      'title' => "Number of steps for interpolation",
    ],
  ];
  /*
   * interpolation steps }
   */
  /*
   * interpolation }
   */
  /*
   * projection }
   */

  /**
   * output file format{
   */
  /**
   * test{
   */
  if (TRANSFORMATION_OUTPUT_FORMAT_VISIBLE) {
    $form['output_format'] = [
      '#type' => 'fieldset',
      '#title' => t('Select output format'),
      '#weight' => 8,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => [
        'class' => [
          'output-format-fieldset',
        ],
        'msb-tooltip' => "Output file format",
      ],
    ];
    $output_file_formats = [
      "NetCDF" => "NetCDF",
      "NetCDF-4" => "NetCDF-4",
      "GeoTIFF" => "GeoTIFF",
    ];
    $form['output_format']['selected_output_format'] = [
      '#type' => 'select',
      '#title' => t('Output format'),
      '#options' => $output_file_formats,
      '#description' => t(''),
      '#empty' => t(''),
      '#weight' => 8,
    ];
  }


  /**
   * test}
   */
  /**
   * output file format}
   */
  /**
   * map test{
   * todo1
   * the map for transformation with fimex needs to implement proj4
   */
  //    $jquery_path = "/sites/all/modules/jquery_update/replace/jquery/1.10/jquery.min.js";
  //    $form['projection']['map'] = array(
  //      '#prefix' => ' ',
  //      '#markup' => adc_get_geographical_search_map(),
  //      '#suffix' => ' ',
  //            '#attached' => array(
  //        'js' => array(
  //          $jquery_path,
  //        ),
  //      ),
  //    );
  //    $form['#validate'][] = 'msb_all_or_none_latlon_validate';
  /**
   * map test}
   *//*
   *
   */;
  // $form['#validate'] = array('select_variables_validate');
  $form['#submit'][] = 'metsis_fimex_submit';
  //$form['#submit'][] = 'metsis_fimex_extra_submit';
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 13,
    // '#access' => FALSE,
  ];

  $calling_results_page = isset($_GET['calling_results_page']) ? check_plain($_GET['calling_results_page']) : '';
  /**
   * back button{
   */
  $form['back_to_search'] = [
    '#weight' => 14,
    '#markup' => '<a href="'.$calling_results_page.'" class="adc-button adc-back">Back to results</a>',
  ];

  /**
   * back button}
   */
  /*
   * theme the form{
   * TODO
   */
  $path = drupal_get_path('module', 'metsis_fimex');
  $form['#attached'] = [
    'css' => [
      'type' => 'file',
      'data' => $path . '/css/metsis_fimex.css',
    ],
    'js' => [
      'type' => 'file',
      'data' => $path . '/js/metsis_fimex.js',
    ],
  ];
  /*
   * theme the form}
   */

  return $form;
}

/*
 * metsis_fimex form}
 */

function metsis_fimex_submit($form, &$form_state) {
  $receipt = adc_get_fimex_query($form_state);
  adc_set_message($receipt);
}

function metsis_fimex_extra_submit($form, &$form_state) {

}

function foo_valid() {
  drupal_set_message("TODO: foo validate", 'warning', FALSE);
}

function bar_valid() {
  //drupal_set_message("TODO: validate", 'warning', FALSE);
}

function select_variables_validate($form, &$form_state) {
  if (!array_filter($form_state['values']['selected_variables'])) {
    form_set_error('', t('You must choose atleast one variable!'));
  }
}

function geographical_region_validate() {
  //drupal_set_message("TODO: validate degrees, relative to zero meridian/equator", 'warning', FALSE);
}

function metsis_date_validate() {
  //drupal_set_message("TODO: validate temporal extent values as dates", 'warning', FALSE);
}

function map_region_validate() {
  //drupal_set_message("TODO: validate map region values", 'warning', FALSE);
}

function email_validate() {
  //drupal_set_message("TODO: validate email", 'warning', FALSE);
}

function integer_validate() {
  //drupal_set_message("TODO: validate interpolation steps are integer", 'warning', FALSE);
}

function get_wps_fimex_info($wps_fimex_url) {
  $res = drupal_http_request($wps_fimex_url);
  $data = new SimpleXMLElement($res->data);
  $data = drupal_json_decode(drupal_json_encode($data));
  return $data;
}

function create_transformation_order($form, &$form_state) {
  global $user;
  global $base_url;
  global $metsis_conf;

  /*
   * DEBUG{
   */
  if (DEBUG) {
    $q = "";
    $qh = "";
    $qt = "";

    $qh .= "http://";
    $qh .= $metsis_conf['metsis_basket_server'];
    $qh .= ":";
    $qh .= $metsis_conf['metsis_basket_server_port'];
    $qh .= "/";
    $qh .= $metsis_conf['metsis_basket_server_service'];
    $qh .= "?";

    $qt .= "userId=";
    $qt .= $user->name;
    $qt .= "&email=";
    $qt .= $form_state['values']['email'];
    $qt .= "&site=";
    $qt .= $metsis_conf['drupal_site_data_center_desc'] ? $metsis_conf['drupal_site_data_center_desc'] : $base_url;
    $qt .= "&format=";
    $qt .= $metsis_conf['default_data_archive_format'] ? $metsis_conf['default_data_archive_format'] : "tgz";
    $qt .= "&uri=";
    $qt .= $form_state['values']['opendap'];
    $qt .= "&fiInterpolateProjString=";
    $qt .= urlencode(get_proj4_strings($form_state['values']['selected_projection']));
    $qt .= "&fiInterpolateMethod=";
    $qt .= $form_state['values']['selected_interpolation'];
    $qt .= "&fiSelectVariables=";
    $qt .= implode(",", array_filter($form_state['values']['selected_variables']));
    $qt .= "&fiReducetimeStart=";
    $qt .= $form_state['values']['start_date'];
    $qt .= "&fiReducetimeEnd=";
    $qt .= $form_state['values']['stop_date'];
    $qt .= "&fiInterpolateXAxisMin=";
    $qt .= $form_state['values']['x_axis_from'];
    $qt .= "&fiInterpolateXAxisMax=";
    $qt .= $form_state['values']['x_axis_to'];
    $qt .= "&fiInterpolateYAxisMin=";
    $qt .= $form_state['values']['y_axis_from'];
    $qt .= "&fiInterpolateYAxisMax=";
    $qt .= $form_state['values']['y_axis_to'];
    $qt .= "&fiInterpolateHorSteps=";
    $qt .= $form_state['values']['steps'];
    /**
     * test{
     */
    $qt .= "&fiOutputType=";
    $qt .= $form_state['values']['output_format'];

    /**
     * test}
     */
    $q .= $qh;
    $q .= $qt;
  }
}

/*
 * DEBUG}
 */

function adc_get_fimex_query($form_state) {
  global $user;
  global $base_url;
  global $metsis_conf;
  global $epsg;

  //for some reason the basket and/or the wps services expect
  //date/time format to be yyyy-mm-dd hh:mm:ss
  $basket_wps_date_format = "Y-m-d H:i:s";

  $req_params_mandatory = [
    'wpsUrl' => TRANSFORMATION_SERVER_GETCAPABILITIES,
    'userId' => $user->name,
    'email' => $form_state['values']['email'],
    'site' => $metsis_conf['drupal_site_data_center_desc'] ? $metsis_conf['drupal_site_data_center_desc'] : $base_url,
    'format' => $metsis_conf['default_data_archive_format'] ? $metsis_conf['default_data_archive_format'] : 'tgz',
    //uris for several datasets must be added here
    //$var['complete form']['opendap']['opendap']['#value']
    'uri' => $form_state['values']['opendap'],
    'fiSelectVariables' => implode(",", array_filter($form_state['values']['selected_variables'])),
    'fiReducetimeStart' => get_metsis_date($form_state['values']['start_date'], $basket_wps_date_format),
    'fiReducetimeEnd' => get_metsis_date($form_state['values']['stop_date'], $basket_wps_date_format),
    'fiOutputType' => $form_state['values']['selected_output_format'],
  ];
  //Select spatial extent{
  $req_params_mandatory['fiReduceboxNorth'] = $form_state['values']['north'];
  $req_params_mandatory['fiReduceboxSouth'] = $form_state['values']['south'];
  $req_params_mandatory['fiReduceboxEast'] = $form_state['values']['east'];
  $req_params_mandatory['fiReduceboxWest'] = $form_state['values']['west'];

  //Select spatial extent}
  if (!empty($form_state['values']['x_axis_from']) && !empty($form_state['values']['x_axis_to']) && !empty($form_state['values']['y_axis_from']) && !empty($form_state['values']['y_axis_to']) && !empty($form_state['values']['steps'])
  ) {
    $req_params_projection = [
      'fiInterpolateProjString' => $epsg[$form_state['values']['selected_projection']]['proj4string'],
      'fiInterpolateMethod' => $form_state['values']['selected_interpolation'],
      'fiInterpolateXAxisMin' => $form_state['values']['x_axis_from'],
      'fiInterpolateXAxisMax' => $form_state['values']['x_axis_to'],
      'fiInterpolateYAxisMin' => $form_state['values']['y_axis_from'],
      'fiInterpolateYAxisMax' => $form_state['values']['y_axis_to'],
      'fiInterpolateHorSteps' => $form_state['values']['steps'],
    ];
  }
  if (!empty($req_params_projection)) {
    $req_params = array_merge($req_params_projection, $req_params_mandatory);
  }
  else {
    $req_params = $req_params_mandatory;
  }
  return adc_basket_query(METSIS_BASKET_SERVER, METSIS_BASKET_SERVER_PORT, METSIS_BASKET_SERVER_SERVICE, $req_params);
}

/*
 *  implement hook_theme{
 */

function metsis_fimex_theme() {
  return [
    'metsis_fimex_form' => [
      'render element' => 'form',
    ],
  ];
}

/*
 * implement hook_theme}
 */
/*
 * implement theme function for form{
 * not implemented yet
 */

//function theme_metsis_fimex_form($variables) {
//    //TODO
//    $form = $variables['form'];
//    $output = '';
//    //$output = '<h2>' . t('Transformation') . '</h2>';
//    $output .= '<div class="non-map-div">';
//    //
//    $output .= '<div class="topics-and-variables-div">';
//    $output .= drupal_render($form['topics_and_variables']);
//    $output .= '</div>';
//    //
//    $output .= '<div class="data-collection-period-div">';
//    $output .= drupal_render($form['data_collection_period']);
//    $output .= '</div>';
//    //
//    $output .= '<div class="bounding-box-div">';
//    $output .= drupal_render($form['bounding_box']);
//    $output .= '</div>';
//    //
//    $output .= '<div class="institutions-div">';
//    $output .= drupal_render($form['institutions']);
//    $output .= '</div>';
//    //
//    $output .= '<div class="investigator-div">';
//    $output .= drupal_render($form['investigator']);
//    $output .= '</div>';
//    //
//    $output .= '<div class="full-text-search-div">';
//    $output .= drupal_render($form['full_text_search']);
//    $output .= '</div>';
//    //
//    $output .= '<div class="operational-status-div">';
//    $output .= drupal_render($form['operational_status']);
//    $output .= '</div>';
//    ////
//    ////form-action-div{
//    $output .= '<div class="form-action-div">';
//    ////form-submit-div{
//    //$output .= '<div class="form-submit-div">';
//    $output .= drupal_render($form['submit']);
//    //$output .= '</div>';
//    ////form-submit-div}
//    ////form-reset-div{
//    ////$output .= '<div class="adc-button adc-sbutton">';
//    //$output .= '<div class="form-reset-div">';
//    ////$output .= '<a class="adc-button adc-sbutton">';
//    //$output .= '<a>';
//    if (FORM_RESET_VISIBLE) {
//        $output .= drupal_render($form['reset']);
//    }
//    //$output .= '</a>';
//    //$output .= '</div>';
//    ////goto-basket-div{
//    if (BASKET_ELEMENTS_VISIBLE) {
//        global $user;
//        if (($user->uid) && get_user_item_count($user->uid) > 0) {
//            $output .= drupal_render($form['goto_basket']);
//        }
//    }
//    ////goto-basket-div}
//    $output .= '</div>';
//    ////form-reset-div}
//
//    $output .= '</div>';
//    ////form-action-div}
//    ////map-div{
//    $output .= '<div class="map-div">';
//    ////
//    $output .= '<div class="geographical-search-div">';
//    $output .= drupal_render($form['geographical_search']);
//    $output .= '</div>';
//    ////
//    $output .= '</div>';
//
//    $output .= drupal_render_children($form);
//
//    return $output;
//}

/*
 * implement theme function for form}
 */

/*
 * get wps info test{
 * not in use yet
 */

function adc_get_fimex_info() {
  //TODO: this does nothing useful yet.
  global $user;
  global $base_url;
  global $metsis_conf;

  $metsis_fimex_server = "157.249.176.177";
  $metsis_fimex_server_port = "80";
  $metsis_fimex_server_service = "cgi-bin/pywps.cgi";

  $fimex_service = "http://";
  $fimex_service .= $metsis_fimex_server;
  $fimex_service .= ":";
  $fimex_service .= $metsis_fimex_server_port;
  $fimex_service .= "/";
  $fimex_service .= $metsis_fimex_server_service;


  $form_data = [
    'service' => 'wps',
    'version' => '1.0.0',
    'request' => 'describeprocess',
    'identifier' => 'transformation',
  ];
  $options = [
    'data' => "?" . http_build_query($form_data),
  ];

  $result = drupal_http_request($fimex_service, $options);
}

/*
 * get wps info test}
 */

/*
 * display_example_requests{
 */

function display_example_requests() {
  global $user;

  $requests = [
    'eg0' => [
      'requet' => "http://basket.metsis.met.no:8080/basketService?userId=staging_admin&email=YOURMAIL%40met.no&site=SIOS+Data+Management+Service&format=tgz&uri=http%3A%2F%2Fnbstds.met.no%2Fthredds%2FdodsC%2FNBS%2FS2A%2F2017%2F01%2F19%2FS2A_MSIL1C_20170119T110351_N0204_R094_T32VML_20170119T110348.nc&fiSelectVariables=B2&fiInterpolateMethod=nearestneighbor&fiInterpolateProjString=%2Bproj%3Dutm%20%2Bzone%3D33%20%2Bellps%3DWGS84&fiInterpolateXAxisMin=-75000&fiInterpolateXAxisMax=200000&fiInterpolateYAxisMin=6450000&fiInterpolateYAxisMax=6650000&fiInterpolateHorSteps=200",
      'description' => 'Example 0: simple variable extraction from NBS data on nbstds.met.no',
    ],
    'eg1' => [
      'request' => "http://basket.metsis.met.no:8080/basketService?userId=$user->name&email=$user->mail&site=sios&format=tgz&uri=http://thredds.met.no/thredds/fileServer/data/met.no/itp78/itp78_itp78grd1262.nc",
      'description' => "Example 1 without transformation. OBS. When you are not doing transformation you need to spesify HTTP or ODATA address, NOT OPeNDAP address because you are downloading the ENTIRE file",
    ],
    'eg2' => [
      'request' => "http://basket.metsis.met.no:8080/basketService?userId=$user->name&email=$user->mail&site=sios&format=tgz&uri=http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_12_DEF.nc_20160307&fiInterpolateProjString=%2Bproj%3Dstere+%2Blat_0%3D90+%2Blat_ts%3D71+%2Blon_0%3D0+%2Bk%3D1+%2Bx_0%3D0+%2By_0%3D0+%2Bdatum%3DWGS84+%2Bunits%3Dm+%2Bno_defs&fiInterpolateMethod=nearestneighbor&fiSelectVariables=air_temperature_2m,relative_humidity_2m&fiReducetimeStart=2016-03-08 00:00:00&fiReducetimeEnd=2016-03-09 00:00:00&fiInterpolateXAxisMin=-405273.4375&fiInterpolateXAxisMax=1523437.5&fiInterpolateYAxisMin=-3789062.5&fiInterpolateYAxisMax=-1665039.0625&fiInterpolateHorSteps=100",
      'description' => "Example2 with transformation, using opendap address. Note that fiReducetimeStart and fiReducetimeEnd are within data range of the file you're looking at.",
    ],
    'eg3' => [
      'request' => "http://basket.metsis.met.no:8080/basketService?userId=$user->name&email=$user->mail&site=sios&format=tgz&uri=http://thredds.met.no/thredds/fileServer/cryoclim/met.no/osisaf-sh/osisaf-sh_aggregated_ice_concentration_sh_polstere-100_200910010000.nc;http://thredds.met.no/thredds/fileServer/cryoclim/met.no/osisaf-sh/osisaf-sh_aggregated_ice_concentration_sh_polstere-100_200909010000.nc;http://thredds.met.no/thredds/fileServer/cryoclim/met.no/osisaf-sh/osisaf-sh_aggregated_ice_concentration_sh_polstere-100_200908010000.nc",
      'description' => "Example3, several files, no transformation. Again, HTTP or ODATA address",
    ],
    'eg4' => [
      'request' => "http://basket.metsis.met.no:8080/basketService?userId=$user->name&email=$user->mail&site=sios&format=tgz&uri=http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_12_DEF.nc_20160307&fiSelectVariables=air_temperature_2m,relative_humidity_2m&fiReducetimeStart=2016-03-08 00:00:00&fiReducetimeEnd=2016-03-09 00:00:00",
      'description' => "Example 4, single file, simple variable extraction, no regridding",
    ],
    'eg5' => [
      'request' => "http://basket.metsis.met.no:8080/basketService?userId=$user->name&email=$user->mail&site=sios&format=tgz&uri=http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_12_DEF.nc_20160307&fiInterpolateProjString=%2Bproj%3Dstere+%2Blat_0%3D90+%2Blat_ts%3D71+%2Blon_0%3D0+%2Bk%3D1+%2Bx_0%3D0+%2By_0%3D0+%2Bdatum%3DWGS84+%2Bunits%3Dm+%2Bno_defs&fiInterpolateMethod=nearestneighbor&fiSelectVariables=air_temperature_2m,relative_humidity_2m&fiReducetimeStart=2016-03-08 00:00:00&fiReducetimeEnd=2016-03-09 00:00:00&fiInterpolateXAxisMin=-40527.4375&fiInterpolateXAxisMax=152343.5&fiInterpolateYAxisMin=-378906.5&fiInterpolateYAxisMax=-166503.0625&fiInterpolateHorSteps=10",
      'description' => "Example 5, as 4 but regrid to small domain",
    ],
    'eg6' => [
      'request' => "http://basket.metsis.met.no:8080/basketService?userId=$user->name&email=$user->mail&site=sios&format=tgz&uri=http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_00_DEF.nc_20160307;http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_06_DEF.nc_20160307;http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_12_DEF.nc_20160307;http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/07/AROME_MetCoOp_18_DEF.nc_20160307;http://thredds.met.no/thredds/dodsC/aromemetcoopstarc/2016/03/08/AROME_MetCoOp_00_DEF.nc_20160308&fiInterpolateProjString=%2Bproj%3Dstere+%2Blat_0%3D90+%2Blat_ts%3D71+%2Blon_0%3D0+%2Bk%3D1+%2Bx_0%3D0+%2By_0%3D0+%2Bdatum%3DWGS84+%2Bunits%3Dm+%2Bno_defs&fiInterpolateMethod=nearestneighbor&fiSelectVariables=air_temperature_2m,relative_humidity_2m&fiReducetimeStart=2016-03-08 00:00:00&fiReducetimeEnd=2016-03-09 00:00:00&fiInterpolateXAxisMin=-40527.4375&fiInterpolateXAxisMax=152343.5&fiInterpolateYAxisMin=-378906.5&fiInterpolateYAxisMax=-166503.0625&fiInterpolateHorSteps=10",
      'description' => "Example 6: As 5 but several files",
    ],
  ];

  foreach ($requests as $r) {
    //drupal_set_message($r['description'], 'status');
    //drupal_set_message($r['request'], 'status');
    //drupal_set_message(urldecode($r['request']), 'status');
  }
}

/*
 * display_example_request}
 */
