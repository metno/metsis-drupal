<?php

namespace Drupal\metsis_fimex\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Class MetsisFimexForm.
 */
class MetsisFimexForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'metsis_fimex_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
      $user = \Drupal::currentUser();
      global $metsis_conf;
      global $epsg;
      /**
       * Commented out. Controlled by drupal routing system
       */
      /*
      if ($metsis_conf['authentication_required'] === 1) {
        adc_require_login(drupal_get_destination(), $metsis_conf['authentication_default_message']);
      }*/
      if ($metsis_conf['message']['visible'] === TRUE) {
        \Drupal::messenger()->addWarning($metsis_conf['message']['under_construction']);
      }
      //  if (DEBUG == 1) {
      //    display_example_requests();
      //  }
      if (isset($metsis_conf['warning']['transformation'])) {
        \Drupal::messenger()->addWarning($metsis_conf['warning']['transformation']);
      }
      /**
       * Commented out. Controlled by drupal routing system
       */
      /*
      /*
      if (!($user->id())) {
        \Drupal::messenger()->addMessage($metsis_conf['authentication_default_message']);
        //$dest = drupal_get_destination();
        //drupal_goto('user/login', ['query' => drupal_get_destination()]);
        $form_state->setRedirect('user/login');
      }*/
      $email = isset($_GET['email']) ? \Drupal\Component\Utility\Html::escape($_GET['email']) : $user->getEmail();
      var_dump($email);
      $dataset_id = isset($_GET['dataset_id']) ? \Drupal\Component\Utility\Html::escape($_GET['dataset_id']) : '';
      var_dump($dataset_id);
      $dataset_ids = explode(",", $dataset_id);
      $scna = adc_get_solr_core($dataset_ids);
      $opendap_global_attributes = adc_get_od_global_attributes($dataset_ids[0], $scna[$dataset_ids[0]])['data']['findAllAttributes'];
      $opendap_variables = adc_get_od_variables($dataset_ids[0], $scna[$dataset_ids[0]])['data']['findAllVariables'];
      $opendap_start_time_strings = $metsis_conf['opendap_start_time_strings'];
      $opendap_stop_time_strings = $metsis_conf['opendap_stop_time_strings'];
      $start_time = '';
      $stop_time = '';

      foreach ($opendap_global_attributes as $odga) {
        if (in_array(trim($odga['name']), $opendap_start_time_strings)) {
          $start_time = trim($odga['value']);
        }
        if (in_array(trim($odga['name']), $opendap_stop_time_strings)) {
          $stop_time = trim($odga['value']);
        }
      }
      $reshaped_vars = [];
      if (isset($metsis_conf['transformation_exclude_variables'])) {
        $transformation_exclude_variables = explode(',', $metsis_conf['transformation_exclude_variables']);
      }
      for ($i = 0; $i < count($opendap_variables); $i++) {
        if (isset($transformation_exclude_variables)) {
          if (in_array($opendap_variables[$i]['name'], $transformation_exclude_variables)) {
            continue;
          }
        }
        $reshaped_vars[$i]['name'] = $opendap_variables[$i]['name'];
        foreach ($opendap_variables[$i]['attributes'] as $k => $v) {
          $reshaped_vars[$i][$v['name']] = $v['value'];
        }
      }
      if (empty($dataset_ids)) {
        $form_state->setRedirect('metsis_qsearch.metsis_qsearch_form');
        //drupal_goto("/metadata_search");
      }
      $fields = [
        METADATA_PREFIX . "geographic_extent_rectangle_east",
        METADATA_PREFIX . "geographic_extent_rectangle_west",
        METADATA_PREFIX . "geographic_extent_rectangle_north",
        METADATA_PREFIX . "geographic_extent_rectangle_south",
        METADATA_PREFIX . "temporal_extent_start_date",
        METADATA_PREFIX . "temporal_extent_end_date",
        METADATA_PREFIX . "title",
        METADATA_PREFIX . "abstract",
        METADATA_PREFIX . "data_access_resource",
      ];
      $solr_data = [];
      $solr_cores = adc_get_solr_core($dataset_ids);
      var_dump($solr_cores);
      for ($i = 0; $i < count($dataset_ids); $i++) {
        $solr_data[] = msb_get_fields(SOLR_CORE_CHILD, $dataset_ids[$i], $fields);
      }
      $dar = [];
      var_dump($solr_data);
      foreach ($solr_data as $sd) {
        if ($sd['response']['numFound'] == 0) {
          \Drupal::messenger()->addError("Invalid dataset ID");
        }
        $dar[] = msb_concat_data_access_resource($sd['response']['docs'][0][METADATA_PREFIX . 'data_access_resource']);
      }
      var_dump($dar);
      $opendap_ddx = $dar[0]['OPeNDAP']['url'] . ".ddx";
      $jod_data = adc_get_od_data($opendap_ddx);
      foreach ($opendap_global_attributes as $odga) {
        if ($odga['name'] == 'start_date' || $odga['name'] == 'min_time' || $odga['name'] == 'start_time' || $odga['name'] == 'calculated_start_time') {
          $od_temporal_extent['start_date'] = $odga['value'];
        }
        else {
          $od_temporal_extent['start_date'] = "";
        }
        if ($odga['name'] == 'stop_date' || $odga['name'] == 'max_time' || $odga['name'] == 'stop_time' || $odga['name'] == 'calculated_stop_time') {
          $od_temporal_extent['stop_date'] = $odga['value'];
        }
        else {
          $od_temporal_extent['stop_date'] = '';
        }
      }
      $epsg = get_proj4_strings();
      $od_proj4 = adc_get_od_proj4($jod_data);
      if (isset($od_proj4['Original'])) {
        $epsg['Original'] = $od_proj4['Original'];
      }
      elseif (isset($reshaped_vars['proj4_string'])) {
        $epsg['Original'] = $reshaped_vars['proj4_string'];
      }
      else {
        $epsg['Original'] = "";
      }
      $od_global_attributes = $opendap_global_attributes;
      if (!array_key_exists('title', $od_global_attributes)) {
        $od_global_attributes['title'] = "Title (discovery metadata): " . implode(",", $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'title']);
      }
      if (!array_key_exists('abstract', $od_global_attributes)) {
        $od_global_attributes['abstract'] = "Abstract (discovery metadata): " . implode(",", $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'abstract']);
      }
      if (!array_key_exists('description', $od_global_attributes)) {
        $od_global_attributes['description'] = "Description: MISSING";
      }
      $opendap_urls = [];
      foreach ($dar as $dd) {
        $opendap_urls[] = $dd['OPeNDAP']['url'];
      }
      $form['opendap'] = [
        'opendap' => [
          '#type' => 'hidden',
          '#value' => implode(";", $opendap_urls),
        ],
      ];
      $form['od_title'] = ['#markup' => '<h1>' . $od_global_attributes['title'] . '</h1>'];
      $form['od_abstract'] = ['#markup' => '<h4>' . $od_global_attributes['abstract'] . '</h4>'];
      $form['actions'] = ['#type' => 'actions'];
      $form['user_info'] = [
        '#type' => 'fieldset',
        '#title' => t('The e-mail address to send the results to'),
        '#weight' => 1,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#attributes' => [
          'class' => ['user-info-fieldset'],
          'msb-tooltip' => "Enter the e-mail you wish the results to be sent to.",
        ],
      ];
      $form['user_info']['email'] = [
        'email' => [
          '#title' => t('Send results to:'),
          '#type' => 'textfield',
          '#required' => TRUE,
          '#default_value' => t($email),
          '#element_validate' => ['email_validate'],
          '#attributes' => [
            'class' => ['user-info', 'beautytips'],
            'title' => "The e-mail address to send the results to",
          ],
        ],
      ];
      $form['geographical_area'] = [
        '#type' => 'fieldset',
        '#title' => t('Select spatial extent'),
        '#weight' => 2,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#attributes' => [
          'class' => ['geographical-area-fieldset'],
          'msb-tooltip' => "Geographical area of desired output data (in degrees, relative to zero meridian/equator)",
        ],
      ];
      $form['geographical_area'][] = [
        'north' => [
          '#title' => t('Degrees north'),
          '#type' => 'textfield',
          '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_north'],
          '#element_validate' => ['geographical_region_validate'],
          '#attributes' => [
            'class' => ['geographical-area', 'beautytips'],
            'title' => "Degrees north relative to zero meridian/equator",
          ],
        ],
        'south' => [
          '#title' => t('Degrees south'),
          '#type' => 'textfield',
          '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_south'],
          '#element_validate' => ['geographical_region_validate'],
          '#attributes' => [
            'class' => ['geographical-area', 'beautytips'],
            'title' => "Degrees south relative to zero meridian/equator",
          ],
        ],
        'east' => [
          '#title' => t('Degrees east'),
          '#type' => 'textfield',
          '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_east'],
          '#element_validate' => ['geographical_region_validate'],
          '#attributes' => [
            'class' => ['geographical-area', 'beautytips'],
            'title' => "Degrees east relative to zero meridian/equator",
          ],
        ],
        'west' => [
          '#title' => t('Degrees west'),
          '#type' => 'textfield',
          '#default_value' => $solr_data[0]['response']['docs'][0][METADATA_PREFIX . 'geographic_extent_rectangle_west'],
          '#element_validate' => ['geographical_region_validate'],
          '#attributes' => [
            'class' => ['geographical-area', 'beautytips'],
            'title' => "Degrees west relative to zero meridian/equator",
          ],
        ],
      ];
      $form['temporal_extent'] = [
        '#type' => 'fieldset',
        '#title' => t('Select temporal extent'),
        '#weight' => 3,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#attributes' => [
          'class' => ['temporal-extent-fieldset'],
          'msb-tooltip' => "Temporal extent of output data",
        ],
      ];
      $form['temporal_extent'][] = [
        'start_date' => [
          '#title' => t('Start date'),
          '#type' => 'textfield',
          '#default_value' => $start_time,
          '#element_validate' => ['metsis_date_validate'],
          '#attributes' => [
            'class' => ['temporal-extent', 'beautytips'],
            'title' => "Start date of output data",
          ],
        ],
        'stop_date' => [
          '#title' => t('Stop date'),
          '#type' => 'textfield',
          '#default_value' => $stop_time,
          '#element_validate' => ['metsis_date_validate'],
          '#attributes' => [
            'class' => ['temporal-extent', 'beautytips'],
            'title' => "Stop date of output data",
          ],
        ],
      ];
      $variables = $reshaped_vars;
      $od_vars = [];
      foreach ($variables as $v) {
        $name = isset($v['name']) ? $v['name'] : "";
        $standard_name = isset($v['standard_name']) ? $v['standard_name'] : "";
        $long_name = isset($v['long_name']) ? $v['long_name'] : "";
        $units = isset($v['units']) ? $v['units'] : "";
        $od_vars[] = [
          'name' => $name,
          'standard_name' => $standard_name,
          'long_name' => $long_name,
          'units' => $units,
        ];
      }
      sort($od_vars);
      $header = [
        'name' => t('Name'),
        'standard_name' => t('Standard name'),
        'long_name' => t('Long name'),
        'units' => t('Units'),
      ];
      $options = [];
      foreach ($od_vars as $v) {
        $options[$v['name']] = [
          'name' => $v['name'],
          'standard_name' => $v['standard_name'],
          'long_name' => $v['long_name'],
          'units' => $v['units'],
        ];
      }
      $form['od_variables'] = [
        '#type' => 'fieldset',
        '#title' => t('Select variables'),
        '#weight' => 5,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#element_validate' => ['select_variables_validate'],
        '#attributes' => [
          'class' => ['od-variables-fieldset',],
          'msb-tooltip' => "Variables",
        ],
      ];
      $form['od_variables']['selected_variables'] = [
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
        '#empty' => t(''),
        '#weight' => 5,
      ];
      $projection_options = [];
      foreach ($epsg as $key => $value) {
        global $epsg;
        if (!isset($value['description'])) {
          $projection_options[$key] = "No description found";
        }
        else {
          $projection_options[$key] = $value['description'];
        }
      }
      $form['projection'] = [
        '#type' => 'fieldset',
        '#title' => t('Select map projection'),
        '#weight' => 7,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#attributes' => [
          'class' => ['projection-fieldset'],
          'msb-tooltip' => "Map projection",
        ],
      ];
      $form['projection']['selected_projection'] = [
        '#type' => 'select',
        '#title' => t('Projection'),
        '#options' => $projection_options,
        '#default_value' => "Original",
        '#description' => t(''),
        '#empty' => t(''),
        '#weight' => 7,
      ];
      $form['projection'][] = [
        'x_axis_from' => [
          '#title' => t('x-axis from:'),
          '#type' => 'textfield',
          '#element_validate' => ['map_region_validate'],
          '#attributes' => [
            'placeholder' => t('Minimum value of x-coordinate'),
            'class' => ['map-region', 'beautytips'],
            'title' => "x-axis from",
          ],
        ],
        'x_axis_to' => [
          '#title' => t('x-axis to:'),
          '#type' => 'textfield',
          '#element_validate' => ['map_region_validate'],
          '#attributes' => [
            'placeholder' => t('Maximum value of x-coordinate'),
            'class' => ['map-region', 'beautytips'],
            'title' => "x-axis to",
          ],
        ],
        'y_axis_from' => [
          '#title' => t('y-axis from:'),
          '#type' => 'textfield',
          '#element_validate' => ['map_region_validate'],
          '#attributes' => [
            'placeholder' => t('Minmum value of y-coordinate'),
            'class' => ['map-region', 'beautytips'],
            'title' => "y-axis from",
          ],
        ],
        'y_axis_to' => [
          '#title' => t('y-axis to:'),
          '#type' => 'textfield',
          '#element_validate' => ['map_region_validate'],
          '#attributes' => [
            'placeholder' => t('Maximum value of y-coordinate'),
            'class' => ['map-region', 'beautytips'],
            'title' => "y-axis to",
          ],
        ],
      ];
      $interpolations = [
        "nearestneighbor" => "nearestneighbor",
        "bilinear" => "bilinear",
        "bicubic" => "bicubic",
        "coord_nearestneighbor" => "coord_nearestneighbor",
        "coord_kdtree" => "coord_kdtree",
        "forward_max" => "forward_max",
        "forward_mean" => "forward_mean",
        "forward_median" => "forward_median",
        "forward_sum" => "forward_sum",
      ];
      $form['projection']['selected_interpolation'] = [
        '#type' => 'select',
        '#title' => t('Interpolation'),
        '#options' => $interpolations,
        '#description' => t(''),
        '#empty' => t(''),
        '#weight' => 7,
      ];
      $form['projection']['steps'] = [
        '#type' => 'textfield',
        '#title' => t('Number of steps'),
        '#description' => t(''),
        '#empty' => t(''),
        '#element_validate' => ['integer_validate'],
        '#attributes' => [
          'placeholder' => t('Number of point to interpolate to'),
          'class' => ['interpolation-steps', 'beautytips'],
          'title' => "Number of steps for interpolation",
        ],
      ];
      if (TRANSFORMATION_OUTPUT_FORMAT_VISIBLE) {
        $form['output_format'] = [
          '#type' => 'fieldset',
          '#title' => t('Select output format'),
          '#weight' => 8,
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#attributes' => [
            'class' => ['output-format-fieldset'],
            'msb-tooltip' => "Output file format",
          ],
        ];
        $output_file_formats = [
          "NetCDF" => "NetCDF",
          "NetCDF-4" => "NetCDF-4",
          "GeoTIFF" => "GeoTIFF",
        ];
        $form['output_format']['selected_output_format'] = [
          '#type' => 'select',
          '#title' => t('Output format'),
          '#options' => $output_file_formats,
          '#description' => t(''),
          '#empty' => t(''),
          '#weight' => 8,
        ];
      };
      $form['#submit'][] = 'metsis_fimex_submit';
      $form['submit'] = [
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#weight' => 13,
      ];
      $form['back_to_search'] = [
        '#weight' => 14,
        '#markup' => '<a href="#" class="adc-button adc-back">Back to results</a>',
      ];
      $path = drupal_get_path('module', 'metsis_fimex');
      $form['#attached'] = [
        'css' => [
          'type' => 'file',
          'data' => $path . '/css/metsis_fimex.css',
        ],
        'js' => ['type' => 'file', 'data' => $path . '/js/metsis_fimex.js',],
      ];
      return $form;
    }

    /**
     * {@inheritdoc}
     */
    public function validateForm(array &$form, FormStateInterface $form_state) {
      foreach ($form_state->getValues() as $key => $value) {
        // @TODO: Validate fields.
      }
      parent::validateForm($form, $form_state);
    }

    /**
     * {@inheritdoc}
     */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $receipt = adc_get_fimex_query($form_state);
    adc_set_message($receipt);
  }

  function metsis_fimex_extra_submit($form, &$form_state) {

    }

    function foo_valid() {
      \Drupal::messenger()->addWarning("TODO: foo validate");
    }

    function bar_valid() {

    }

    function select_variables_validate($form, &$form_state) {
      if (!array_filter($form_state['values']['selected_variables'])) {
        form_set_error('', t('You must choose atleast one variable!'));
      }
    }

    function geographical_region_validate() {

    }

    function metsis_date_validate() {

    }

    function map_region_validate() {

    }

    function email_validate() {

    }

    function integer_validate() {

    }

    function get_wps_fimex_info($wps_fimex_url) {
      // @FIXME
    // drupal_http_request() has been replaced by the Guzzle HTTP client, which is bundled
    // with Drupal core.
    //
    //
    // @see https://www.drupal.org/node/1862446
    // @see http://docs.guzzlephp.org/en/latest
    // $res = drupal_http_request($wps_fimex_url);

      $data = new SimpleXMLElement($res->data);
      $data = \Drupal\Component\Serialization\Json::decode(\Drupal\Component\Serialization\Json::encode($data));
      return $data;
    }

    function create_transformation_order($form, &$form_state) {
      $user = \Drupal::currentUser();
      global $base_url;
      global $metsis_conf;
      if (DEBUG == 1) {
        $q = "";
        $qh = "";
        $qt = "";
        $qh .= "http://";
        $qh .= $metsis_conf['metsis_basket_server'];
        $qh .= ":";
        $qh .= $metsis_conf['metsis_basket_server_port'];
        $qh .= "/";
        $qh .= $metsis_conf['metsis_basket_server_service'];
        $qh .= "?";
        $qt .= "userId=";
        $qt .= $user->name;
        $qt .= "&email=";
        $qt .= $form_state['values']['email'];
        $qt .= "&site=";
        $qt .= $metsis_conf['drupal_site_data_center_desc'] ? $metsis_conf['drupal_site_data_center_desc'] : $base_url;
        $qt .= "&format=";
        $qt .= $metsis_conf['default_data_archive_format'] ? $metsis_conf['default_data_archive_format'] : "tgz";
        $qt .= "&uri=";
        $qt .= $form_state['values']['opendap'];
        $qt .= "&fiInterpolateProjString=";
        $qt .= urlencode(get_proj4_strings($form_state['values']['selected_projection']));
        $qt .= "&fiInterpolateMethod=";
        $qt .= $form_state['values']['selected_interpolation'];
        $qt .= "&fiSelectVariables=";
        $qt .= implode(",", array_filter($form_state['values']['selected_variables']));
        $qt .= "&fiReducetimeStart=";
        $qt .= $form_state['values']['start_date'];
        $qt .= "&fiReducetimeEnd=";
        $qt .= $form_state['values']['stop_date'];
        $qt .= "&fiInterpolateXAxisMin=";
        $qt .= $form_state['values']['x_axis_from'];
        $qt .= "&fiInterpolateXAxisMax=";
        $qt .= $form_state['values']['x_axis_to'];
        $qt .= "&fiInterpolateYAxisMin=";
        $qt .= $form_state['values']['y_axis_from'];
        $qt .= "&fiInterpolateYAxisMax=";
        $qt .= $form_state['values']['y_axis_to'];
        $qt .= "&fiInterpolateHorSteps=";
        $qt .= $form_state['values']['steps'];
        $qt .= "&fiOutputType=";
        $qt .= $form_state['values']['output_format'];
        $q .= $qh;
        $q .= $qt;
        \Drupal::logger('METSIS fimex query')->debug('<pre>' . print_r($q, TRUE) . '</pre>', []);
      }
    }

    function adc_get_fimex_query($form_state) {
      $user = \Drupal::currentUser();
      global $base_url;
      global $metsis_conf;
      global $epsg;
      $basket_wps_date_format = "Y-m-d H:i:s";
      if (defined('TRANSFORMATION_SERVER_GETCAPABILITIES')) {
        $transformation_server_getcapabilities = TRANSFORMATION_SERVER_GETCAPABILITIES;
      }
      else {
        $transformation_server_getcapabilities = "";
      }
      $req_params_mandatory = [
        'wpsUrl' => $transformation_server_getcapabilities,
        'userId' => $user->name,
        'email' => $form_state['values']['email'],
        'site' => $metsis_conf['drupal_site_data_center_desc'] ? $metsis_conf['drupal_site_data_center_desc'] : $base_url,
        'format' => $metsis_conf['default_data_archive_format'] ? $metsis_conf['default_data_archive_format'] : 'tgz',
        'uri' => $form_state['values']['opendap'],
        'fiSelectVariables' => implode(",", array_filter($form_state['values']['selected_variables'])),
        'fiReducetimeStart' => get_metsis_date($form_state['values']['start_date'], $basket_wps_date_format),
        'fiReducetimeEnd' => get_metsis_date($form_state['values']['stop_date'], $basket_wps_date_format),
        'fiOutputType' => $form_state['values']['selected_output_format'],
      ];
      $req_params_mandatory['fiReduceboxNorth'] = $form_state['values']['north'];
      $req_params_mandatory['fiReduceboxSouth'] = $form_state['values']['south'];
      $req_params_mandatory['fiReduceboxEast'] = $form_state['values']['east'];
      $req_params_mandatory['fiReduceboxWest'] = $form_state['values']['west'];
      if (!empty($form_state['values']['x_axis_from']) && !empty($form_state['values']['x_axis_to']) && !empty($form_state['values']['y_axis_from']) && !empty($form_state['values']['y_axis_to']) && !empty($form_state['values']['steps'])) {
        $req_params_projection = [
          'fiInterpolateProjString' => $epsg[$form_state['values']['selected_projection']]['proj4string'],
          'fiInterpolateMethod' => $form_state['values']['selected_interpolation'],
          'fiInterpolateXAxisMin' => $form_state['values']['x_axis_from'],
          'fiInterpolateXAxisMax' => $form_state['values']['x_axis_to'],
          'fiInterpolateYAxisMin' => $form_state['values']['y_axis_from'],
          'fiInterpolateYAxisMax' => $form_state['values']['y_axis_to'],
          'fiInterpolateHorSteps' => $form_state['values']['steps'],
        ];
      }
      if (!empty($req_params_projection)) {
        $req_params = array_merge($req_params_projection, $req_params_mandatory);
      }
      else {
        $req_params = $req_params_mandatory;
      }
      return adc_basket_query(METSIS_BASKET_SERVER, METSIS_BASKET_SERVER_PORT, METSIS_BASKET_SERVER_SERVICE, $req_params);
    }
}
